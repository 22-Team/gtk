<!-- ##### SECTION Title ##### -->
Multihead Support

<!-- ##### SECTION Short_Description ##### -->
functions for creating and managing multiscreen or multidisplay applications

<!-- ##### SECTION Long_Description ##### -->
<para>
  Multihead support is based around three main object type:
  <itemizedlist>
  <listitem><para>#GdkDisplayManager</para></listitem>
  <listitem><para>#GdkDisplay</para></listitem>
  <listitem><para>#GdkScreen</para></listitem>
  </itemizedlist>
</para>

<para>
  The #GdkDisplayManager object main usage is to access the various 
  #GdkDisplay objects currently existing on the system.
  Only one instance of this object is ever used per application and 
  can be accessed via gdk_get_display_manager().
</para>
<para>
  #GdkDisplay objects are the Gdk representation of the X Display which can be 
  described as <emphasis>"a workstation consisting of a keyboard a pointing
  device (such as a mouse) and one or more screens"</emphasis>. 
  It is used to open and keep track of various #GdkScreen objects currently 
  intanciated by the application. It is also used to grab and release the keyboard 
  and the mouse pointer.
</para>
<para>
  #GdkScreen objects are the Gdk representation of a physical screen. It is used 
  throughout Gdk and Gtk+ to specify which screen the top level windows (GtkWindow)
  are to be displayed on. 
  It is also used to query the screen specification and default settings such as 
  the default colormap (gdk_screen_get_default_colormap()),
  the screen width (gdk_screen_get_width()), etc.
</para>
<para> 
  the following code samples demonstrate common usage of the objects described above
</para>

<example>
  <title>Testing the number of screen on the current display</title>
  <programlisting>
  gint num_screen = 0;
  gchar *displayname = NULL;
  GdkScreen **screen_list;
  GdkDisplay *display;
  
  gtk_init (&amp;argc, &amp;argv);

  display = gdk_get_default_display ();
  num_screen = gdk_display_get_n_screens (display);
  displayname = gdk_display_get_name (display);
  if (num_screen <= 1)
    {
      printf ("This Xserver (%s) manages only one screen. exiting...\n",
              displayname);
      exit (1);
    }
  else
    {
      printf ("This Xserver (%s) manages %d screens.\n", displayname,
              num_screen);
    }

  </programlisting>
</example>

<example>
  <title>Opening a second display</title>
  <programlisting>
   gchar *second_screen_name;
   GdkDisplay *second_display;
   GdkScreen *second_screen;
   GtkWidget *window;
   
   gtk_init (&amp;argc, &amp;argv);
   
   /* screen2_name needs to be initialized before calling 
    * gdk_display_new() */
    second_display = gdk_display_new (&amp;argc, &amp;argv, second_screen_name);
    if (second_display)
        second_screen = gdk_display_get_default_screen (second_display);
    else 
      {
	g_print ("Can't open display :\n\t%s\n\n",
		  second_screen_name);
        exit (1);	
      }
    /* now GdkScreen can be assigned to GtkWindows */
  
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    gtk_window_set_screen (window, second_screen);
  </programlisting>
</example>

<!-- ##### SECTION See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GdkDisplay</term>
<listitem><para>the Gdk Object used to represent and manipulate display
		related data</para></listitem>
</varlistentry>
<varlistentry>
<term>#GdkScreen</term>
<listitem><para>the Gdk Object used to represent and query screen related
		data</para></listitem>
</varlistentry>

</variablelist>

</para>

<!-- ##### STRUCT GdkDisplayManager ##### -->
<para>

</para>


<!-- ##### FUNCTION gdk_get_default_display ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gdk_get_default_screen ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gdk_get_display_manager ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gdk_display_manager_get_display_count ##### -->
<para>

</para>

@display_mgr: 
@Returns: 


