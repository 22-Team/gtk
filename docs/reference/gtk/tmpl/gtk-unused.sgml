<!-- ##### SECTION ./tmpl/gtkarg.sgml:Long_Description ##### -->
<para>
All the functions in here are marked a Non-public.
We describe it anyway because it is occasionally useful
to understand how the work is done.
</para>
<para>
Arguments are a way of describing a named parameter to a function.
They have two important roles within gtk+:
<itemizedlist>
<listitem>
<para>
they describe <wordasword>object properties</wordasword>.
This means that they present an interface to get and set a named-type
for any type of object in a consistent way.
(All the relevant functions to do this start with gtk_object_set
or gtk_object_get).
</para>
</listitem>
<listitem>
<para>
they describe <wordasword>signal arguments</wordasword>.
This is a lot less often needed but still useful.
Usually if you are just emitting or creating a particular signal
it is more convenient to just use g_signal_emit() or g_signal_new().
However if you are writing a function to emit or create an arbitrary
signal, you must use g_signal_emitv() or g_signal_newv().
</para>
</listitem>
</itemizedlist>
</para>


<!-- ##### SECTION ./tmpl/gtkarg.sgml:See_Also ##### -->
<para>
#GtkObject.
</para>


<!-- ##### SECTION ./tmpl/gtkarg.sgml:Short_Description ##### -->
Utility function to manipulate lists of named, typed arguments.


<!-- ##### SECTION ./tmpl/gtkarg.sgml:Title ##### -->
Implementation of Object Properties


<!-- ##### SECTION ./tmpl/gtkcellrenderertextpixbuf.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkcellrenderertextpixbuf.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkcellrenderertextpixbuf.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/gtkcellrenderertextpixbuf.sgml:Title ##### -->
GtkCellRendererTextPixbuf


<!-- ##### SECTION ./tmpl/gtkclist.sgml:Long_Description ##### -->
<para>
The #GtkCList widget is a very useful multi-columned scrolling list.  
It can display data in nicely aligned vertical columns, with titles 
at the top of the list.
</para>
<para>
GtkCList has been deprecated since GTK+ 2.0 and should not be used
in newly written code. Use #GtkTreeView instead.
</para>


<!-- ##### SECTION ./tmpl/gtkclist.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkclist.sgml:Short_Description ##### -->
A multi-columned scrolling list widget


<!-- ##### SECTION ./tmpl/gtkclist.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkclist.sgml:Title ##### -->
GtkCList


<!-- ##### SECTION ./tmpl/gtkcombo.sgml:Long_Description ##### -->
<para>
The #GtkCombo widget consists of a single-line text entry field and a drop-down
list. The drop-down list is displayed when the user clicks on a small arrow
button to the right of the entry field.
</para>
<para>
The drop-down list is a #GtkList widget and can be accessed using the
<structfield>list</structfield> member of the #GtkCombo-struct.
List elements can contain arbitrary widgets, but if an element is not a
plain label, then you must use the gtk_list_set_item_string() function.
This sets the string which will be placed in the text entry field when the
item is selected.
</para>
<para>
By default, the user can step through the items in the list using the
arrow (cursor) keys, though this behaviour can be turned off with
gtk_combo_set_use_arrows().
</para>
<para>
As of GTK+ 2.4, #GtkCombo has been deprecated in favor of #GtkComboBoxEntry.
</para>

<example id="gtkcombo-simple-example">
<title>Creating a <structname>GtkCombo</structname> widget with simple text 
items.</title>
<programlisting>
  GtkWidget *combo;
  GList *items = NULL;

  items = g_list_append (items, "First Item");
  items = g_list_append (items, "Second Item");
  items = g_list_append (items, "Third Item");
  items = g_list_append (items, "Fourth Item");
  items = g_list_append (items, "Fifth Item");

  combo = gtk_combo_new (<!-- -->);
  gtk_combo_set_popdown_strings (GTK_COMBO (combo), items);
</programlisting>
</example>

<example>
<title>Creating a <structname>GtkCombo</structname> widget with a complex item.</title>
<programlisting>
  GtkWidget *combo, *item, *hbox, *arrow, *label;

  combo = gtk_combo_new (<!-- -->);

  item = gtk_list_item_new (<!-- -->);
  gtk_widget_show (item);

  /* You can put almost anything into the GtkListItem widget. Here we will use
     a horizontal box with an arrow and a label in it. */
  hbox = gtk_hbox_new (FALSE, 3);
  gtk_container_add (GTK_CONTAINER (item), hbox);
  gtk_widget_show (hbox);

  arrow = gtk_arrow_new (GTK_ARROW_RIGHT, GTK_SHADOW_OUT);
  gtk_widget_show (arrow);
  gtk_box_pack_start (GTK_BOX (hbox), arrow, FALSE, FALSE, 0);

  label = gtk_label_new ("First Item");
  gtk_widget_show (label);
  gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);

  /* You must set the string to display in the entry field when the item is
     selected. */
  gtk_combo_set_item_string (GTK_COMBO (combo), GTK_ITEM (item), "1st Item");

  /* Now we simply add the item to the combo's list. */
  gtk_container_add (GTK_CONTAINER (GTK_COMBO (combo)->list), item);
</programlisting>
</example>


<!-- ##### SECTION ./tmpl/gtkcombo.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkcombo.sgml:Short_Description ##### -->
A text entry field with a dropdown list


<!-- ##### SECTION ./tmpl/gtkcombo.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkcombo.sgml:Title ##### -->
GtkCombo


<!-- ##### SECTION ./tmpl/gtkdata.sgml:Long_Description ##### -->
<para>
The #GtkData object is a very simple object intended to be used as a base
class for objects which contain data (i.e. the 'Model' in the object-oriented
Model/View/Controller framework).
</para>
<para>
Currently it is not very useful since all it provides is a "disconnect" signal.
This signal could be emitted by a #GtkData subclass to notify any 'Views'
that they should disconnect from the #GtkData (the 'Model'), possibly just
before the #GtkData is destroyed.
</para>


<!-- ##### SECTION ./tmpl/gtkdata.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkdata.sgml:Short_Description ##### -->
abstract base class for objects containing data.


<!-- ##### SECTION ./tmpl/gtkdata.sgml:Title ##### -->
GtkData


<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Title ##### -->
Debugging


<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Title ##### -->
gtkenums.sgml


<!-- ##### SECTION ./tmpl/gtkfilesel.sgml:Long_Description ##### -->
<para>
#GtkFileSelection has been superseded by the newer #GtkFileChooser family
of widgets.
</para>
<para>
#GtkFileSelection should be used to retrieve file or directory names from 
the user. It will create a new dialog window containing a directory list, 
and a file list corresponding to the current working directory. The filesystem 
can be navigated using the directory list or the drop-down history menu. 
Alternatively, the TAB key can be used to navigate using filename 
completion - common in text based editors such as emacs and jed.
</para>
<para>
File selection dialogs are created with a call to gtk_file_selection_new().
</para>
<para>
The default filename can be set using gtk_file_selection_set_filename() and the selected filename retrieved using gtk_file_selection_get_filename().
</para>
<para>
Use gtk_file_selection_complete() to display files and directories
that match a given pattern. This can be used for example, to show only
*.txt files, or only files beginning with gtk*.
</para>
<para>
Simple file operations; create directory, delete file, and rename file, are available from buttons at the top of the dialog. These can be hidden using gtk_file_selection_hide_fileop_buttons() and shown again using gtk_file_selection_show_fileop_buttons().
</para>
<para>
<example>
<title>Getting a filename from the user.</title>
<programlisting>

/* The file selection widget and the string to store the chosen filename */

void store_filename (GtkWidget *widget, gpointer user_data) {
   GtkWidget *file_selector = GTK_WIDGET (user_data);
   const gchar *selected_filename;

   selected_filename = gtk_file_selection_get_filename (GTK_FILE_SELECTION (file_selector));
   g_print ("Selected filename: &percnt;s\n", selected_filename);
}

void create_file_selection (void) {

   GtkWidget *file_selector;

   /* Create the selector */
   
   file_selector = gtk_file_selection_new ("Please select a file for editing.");
   
   g_signal_connect (GTK_FILE_SELECTION (file_selector)->ok_button,
                     "clicked",
                     G_CALLBACK (store_filename),
                     file_selector);
   			   
   /* Ensure that the dialog box is destroyed when the user clicks a button. */
   
   g_signal_connect_swapped (GTK_FILE_SELECTION (file_selector)->ok_button,
                             "clicked",
                             G_CALLBACK (gtk_widget_destroy), 
                             file_selector);

   g_signal_connect_swapped (GTK_FILE_SELECTION (file_selector)->cancel_button,
                             "clicked",
                             G_CALLBACK (gtk_widget_destroy),
                             file_selector); 
   
   /* Display that dialog */
   
   gtk_widget_show (file_selector);
}

</programlisting>
</example>
</para>


<!-- ##### SECTION ./tmpl/gtkfilesel.sgml:See_Also ##### -->

<para>
<variablelist>
<varlistentry>
<term>#GtkDialog</term>
<listitem><para>Add your own widgets into the #GtkFileSelection.</para></listitem>
</varlistentry>
</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtkfilesel.sgml:Short_Description ##### -->
Prompt the user for a file or directory name


<!-- ##### SECTION ./tmpl/gtkfilesel.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkfilesel.sgml:Title ##### -->
GtkFileSelection


<!-- ##### SECTION ./tmpl/gtkitemfactory.sgml:Long_Description ##### -->
<para>
As of GTK+ 2.4, #GtkItemFactory has been deprecated in favour of #GtkUIManager.
</para>


<!-- ##### SECTION ./tmpl/gtkitemfactory.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkitemfactory.sgml:Short_Description ##### -->
A factory for menus


<!-- ##### SECTION ./tmpl/gtkitemfactory.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkitemfactory.sgml:Title ##### -->
GtkItemFactory


<!-- ##### SECTION ./tmpl/gtklist.sgml:Long_Description ##### -->
<para>
The #GtkList widget is a container whose children are displayed
vertically in order, and can be selected.

The list has many selection modes, which are programmer selective and
depend on how many elements are able to be selected at the same time.
</para>
<para>
GtkList has been deprecated since GTK+ 2.0 and should not be used
in newly written code. Use #GtkTreeView instead.
</para>


<!-- ##### SECTION ./tmpl/gtklist.sgml:See_Also ##### -->
<para>
<variablelist>
<varlistentry>
<term>#GtkContainer</term>
<listitem><para>For functions that apply to every #GtkContainer
(like #GtkList).</para></listitem>
</varlistentry>
<varlistentry>
<term>#GtkListitem</term>
<listitem><para>Children of a #GtkList widget must be of this
type.</para></listitem>
</varlistentry>
</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtklist.sgml:Short_Description ##### -->
Widget for packing a list of selectable items


<!-- ##### SECTION ./tmpl/gtklist.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtklist.sgml:Title ##### -->
GtkList


<!-- ##### SECTION ./tmpl/gtklistitem.sgml:Long_Description ##### -->
<para>
The #GtkListItem widget is used for each item in a #GtkList.
</para>
<para>
GtkList has has been deprecated since GTK+ 2.0 and should not be used
in newly written code. Use #GtkTreeView instead.
</para>


<!-- ##### SECTION ./tmpl/gtklistitem.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GtkList</term>
<listitem><para>the parent list widget.</para></listitem>
</varlistentry>

</variablelist>

</para>


<!-- ##### SECTION ./tmpl/gtklistitem.sgml:Short_Description ##### -->
An item in a GtkList


<!-- ##### SECTION ./tmpl/gtklistitem.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtklistitem.sgml:Title ##### -->
GtkListItem


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Long_Description ##### -->
<refsect2>
<title>What are Signal Marshallers?</title>
<para>
Marshals are functions which all have the same prototype:
they take a #GtkObject, a #GtkSignalFunc, a #gpointer,
and an array of argument values.
The functions are names gtk_marshall_RETURNTYPE__PARAMTYPE1_PARAMTYPE2....
</para>
<para>
They then call a native function:  the GtkObject is the first
parameter passed in.  The arguments are passed in the native
calling convention:  chars, shorts, ints, longs may be packed
on the stack, or tucked in registers:  it doesn't matter
because the same calling convention will be generated
inside the gtkmarshal code as is expected where you define
your handlers.
</para>
<para>
So the function named:
<programlisting>
gtk_marshal_BOOL__POINTER_INT_INT_UINT(GtkObject*, GtkSignalFunc, gpointer, GtkArg*);
</programlisting>
will call the #GtkSignalFunc assuming it was a function with signature:
<programlisting>
gboolean sigfunc(gpointer,gint,gint,guint);
</programlisting>
</para>
</refsect2>
<refsect2>
<title>Writing Custom Marshals</title>
<para>
Marshals are primarily used as arguments to g_signal_new().
Sometimes, you may find that a marshaller you need isn't available
in the standard list.  Then you have to write your own.
</para>
<para>
If you wish to define a signal with a new type of argument list.
Suppose you want 2 pointers and 2 integers.
You would write:
<programlisting>
typedef int (*GtkSignal_INT__POINTER_POINTER_INT_INT)(
			gpointer, gpointer, gint, gint
);

void marshal_INT__POINTER_POINTER_INT_INT(GtkObject*    object,
					   GtkSignalFunc func,
					   gpointer      func_data,
                                           GtkArg*       args)
{
	GtkSignal_NONE__POINTER_POINTER_INT_INT rfunc;
	gint* return_val;
	return_val = GTK_RETLOC_INT(args[4]);
	rfunc = (GtkSignal_INT__POINTER_POINTER_INT_INT)func;
	*return_val = (*rfunc)(object,
                               GTK_VALUE_POINTER(args[0]),
                               GTK_VALUE_POINTER(args[1]),
                               GTK_VALUE_INT(args[2]),
                               GTK_VALUE_INT(args[3]),
                               func_data);
}
</programlisting>
</para>
</refsect2>


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GtkSignal</term>
<listitem><para>The signal handling functions (of which marshallers are 
really an implementation detail).</para></listitem>
</varlistentry>

</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Short_Description ##### -->
Functions to adapt C structures to native calling convention.


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Title ##### -->
Signal Marshallers


<!-- ##### SECTION ./tmpl/gtkpacker.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkpacker.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkpacker.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/gtkpacker.sgml:Title ##### -->
GtkPacker


<!-- ##### SECTION ./tmpl/gtkpreview.sgml:Long_Description ##### -->
<para>
The #GtkPreview widget provides a simple interface 
used to display images as RGB or grayscale data.
It's deprecated; just use a #GdkPixbuf displayed by a #GtkImage, or
perhaps a #GtkDrawingArea. #GtkPreview has no advantage over those 
approaches.
</para>


<!-- ##### SECTION ./tmpl/gtkpreview.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GdkRGB</term>
<listitem><para>the backend used by #GtkPreview.</para></listitem>
</varlistentry>

</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtkpreview.sgml:Short_Description ##### -->
A widget to display RGB or grayscale data


<!-- ##### SECTION ./tmpl/gtkpreview.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkpreview.sgml:Title ##### -->
GtkPreview


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Title ##### -->
Private Information


<!-- ##### SECTION ./tmpl/gtkthemes.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkthemes.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkthemes.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/gtkthemes.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtkthemes.sgml:Title ##### -->
Themes


<!-- ##### SECTION ./tmpl/gtktipsquery.sgml:Long_Description ##### -->
<para>
The #GtkTipsQuery widget is a subclass of #GtkLabel which is used to display
help about widgets in a user interface.
</para>
<para>
A query is started with a call to gtk_tips_query_start_query(), usually
when some kind of 'Help' button is pressed. The #GtkTipsQuery then grabs all
events, stopping the user interface from functioning normally.
Then as the user moves the mouse over the widgets, the #GtkTipsQuery displays
each widget's tooltip text.
</para>
<para>
By connecting to the "widget-entered" or "widget-selected" signals, it is
possible to customize the #GtkTipsQuery to perform other actions when widgets
are entered or selected. For example, a help browser could be opened with
documentation on the widget selected.
</para>
<para>
At some point a call to gtk_tips_query_stop_query() must be made in order to
stop the query and return the interface to its normal state.
The gtk_tips_query_set_caller() function can be used to specify a widget
which the user can select to stop the query (often the same button used to
start the query).
</para>


<!-- ##### SECTION ./tmpl/gtktipsquery.sgml:See_Also ##### -->
<para>
<variablelist>
<varlistentry>
<term>#GtkTooltips</term>
<listitem><para>the object which handles tooltips.</para></listitem>
</varlistentry>
</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtktipsquery.sgml:Short_Description ##### -->
Displays help about widgets in the user interface


<!-- ##### SECTION ./tmpl/gtktipsquery.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/gtktipsquery.sgml:Title ##### -->
GtkTipsQuery


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Title ##### -->
GtkModelSimple


<!-- ##### MACRO GTK_CELL_PIXMAP ##### -->
<para>
A macro to cast a generic #GtkCList cell item to a GtkCellPixmap pointer.
</para>

@cell: The #GtkCList cell item to convert.

<!-- ##### MACRO GTK_CELL_PIXTEXT ##### -->
<para>
A macro to cast a generic #GtkCList cell item to a GtkCellPixText pointer.
</para>

@cell: The #GtkCList cell item to convert.

<!-- ##### MACRO GTK_CELL_TEXT ##### -->
<para>
A macro to cast a generic #GtkCList cell item to a GtkCellText pointer.
</para>

@cell: The #GtkCList cell item to convert.

<!-- ##### MACRO GTK_CELL_WIDGET ##### -->
<para>
A macro to cast a generic #GtkCList cell item to a GtkCellWidget pointer.
</para>

@cell: The #GtkCList cell item to convert.

<!-- ##### MACRO GTK_CHECK_CAST ##### -->
<para>
Casts the object in @tobj into @cast.  If %G_DISABLE_CAST_CHECKS is
defined, just cast it.  Otherwise, check to see if we can cast @tobj
into a @cast.
</para>


<!-- ##### MACRO GTK_CHECK_CLASS_CAST ##### -->
<para>
Casts the object in @tobj into @cast.  If %G_DISABLE_CAST_CHECKS is
defined, just cast it.  Otherwise, check to see if we can cast @tobj
into a @cast.
</para>

@tclass: a #GtkClassInitFunc
@cast_type: a GTK+ type.
@cast: a C type

<!-- ##### MACRO GTK_CHECK_CLASS_TYPE ##### -->
<para>
Determines whether @type_class is a type of @otype.
</para>

@type_class: a #GtkTypeClass class.

<!-- ##### MACRO GTK_CHECK_GET_CLASS ##### -->
<para>
Gets the class of @tobj.
</para>

@tobj: a #GtkObject.

<!-- ##### MACRO GTK_CHECK_TYPE ##### -->
<para>
Determines whether @type_object is a type of @otype.
</para>

@type_object: a #GtkTypeObject object

<!-- ##### MACRO GTK_CLASS_NAME ##### -->
<para>
Returns the type name of @class.
</para>

@class: a #GtkTypeClass.
@Deprecated: Use g_type_name() and G_TYPE_FROM_CLASS() instead.

<!-- ##### MACRO GTK_CLASS_TYPE ##### -->
<para>
Returns the type of @class.
</para>

@class: a #GtkTypeClass.
@Deprecated: Use G_TYPE_FROM_CLASS() instead.

<!-- ##### MACRO GTK_CLIST_ADD_MODE ##### -->
<para>
A macro to test whether the CList is in "add mode."
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_AUTO_RESIZE_BLOCKED ##### -->
<para>
A macro to check if automatic resizing of columns is blocked.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_AUTO_SORT ##### -->
<para>
A macro to test whether the CList has automatic sorting
switched on.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_CHILD_HAS_FOCUS ##### -->
<para>
A macro to check whether a child widget of the CList
has the focus.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_DRAW_DRAG_LINE ##### -->
<para>
A macro to check if the DRAW_DRAG_LINE property is enabled.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_DRAW_DRAG_RECT ##### -->
<para>
A macro to check if the DRAW_DRAG_RECT property is enabled.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_FLAGS ##### -->
<para>
Reads the current flags of the specified CList.
</para>

@clist: The #GtkCList widget from which to get the flags

<!-- ##### MACRO GTK_CLIST_IN_DRAG ##### -->
<para>
A macro to check whether the #GtkCList is in "drag mode."
</para>

@clist: The #GtkCList to check.

<!-- ##### MACRO GTK_CLIST_REORDERABLE ##### -->
<para>
A macro to test if the CList's columns are re-orderable
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_ROW ##### -->
<para>
A macro to cast a GList element to a CListRow pointer.
</para>

@_glist_: The GList element to convert.

<!-- ##### MACRO GTK_CLIST_ROW_HEIGHT_SET ##### -->
<para>
A macro to check whether the #GtkCList's row height is set.
</para>

@clist: The #GtkCList to check.

<!-- ##### MACRO GTK_CLIST_SET_FLAG ##### -->
<para>
A macro to set a particular flag for the specified CList.
</para>

@clist: The #GtkCList widget to affect.
@flag: A single #GtkCList flag to set.  NOTE: Do not add the GTK_ prefix.

<!-- ##### MACRO GTK_CLIST_SHOW_TITLES ##### -->
<para>
A macro to check whether the flag for showing the 
widget's column titles is set.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_CLIST_UNSET_FLAG ##### -->
<para>
A macro to clear a particular flag for the specified CList.
</para>

@clist: The #GtkCList widget to affect.
@flag: A single #GtkCList flag to clear.  NOTE: Do not add the GTK_ prefix.

<!-- ##### MACRO GTK_CLIST_USE_DRAG_ICONS ##### -->
<para>
A macro to check if the USE_DRAG_ICONS property is enabled.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_FUNDAMENTAL_TYPE ##### -->
<para>
Converts a GTK+ type into a fundamental type.
</para>


<!-- ##### MACRO GTK_ICON_SIZE_BUTTON ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_DIALOG ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_LARGE_TOOLBAR ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_MENU ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_SMALL_TOOLBAR ##### -->
<para>

</para>


<!-- ##### MACRO GTK_IS_TIPS_QUERY ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_IS_TIPS_QUERY_CLASS ##### -->
<para>

</para>

@klass: 

<!-- ##### MACRO GTK_OBJECT_CONNECTED ##### -->
<para>
Tests whether a #GtkObject has had a signal connected to it.
</para>

@obj: the object to examine.

<!-- ##### MACRO GTK_OBJECT_CONSTRUCTED ##### -->
<para>
Test whether a GtkObject's arguments have been prepared.
</para>

@obj: the object to examine.

<!-- ##### MACRO GTK_OBJECT_DESTROYED ##### -->
<para>
Test whether a GtkObject has had gtk_object_destroy() invoked on it.
</para>

@obj: the object to examine.

<!-- ##### MACRO GTK_OBJECT_FLOATING ##### -->
<para>
Evaluates to %TRUE if the object still has its floating reference count.
See the overview documentation for #GtkObject.
</para>

@obj: the object to examine.

<!-- ##### MACRO GTK_OBJECT_NSIGNALS ##### -->
<para>
Get the number of signals defined by this object.
</para>

@obj: the object to query.

<!-- ##### MACRO GTK_OBJECT_SET_FLAGS ##### -->
<para>
Turns on certain object flags.  (Private)
</para>

@obj: the object to affect.
@flag: the flags to set.

<!-- ##### MACRO GTK_OBJECT_SIGNALS ##### -->
<para>
Get the array of signals defined for this object.
</para>

@obj: the object to fetch the signals from.

<!-- ##### MACRO GTK_OBJECT_UNSET_FLAGS ##### -->
<para>
Turns off certain object flags.  (Private)
</para>

@obj: the object to affect.
@flag: the flags to unset.

<!-- ##### MACRO GTK_PRINT_SETTINGS_NUM_COPIES ##### -->
<para>

</para>


<!-- ##### MACRO GTK_PRINT_SETTINGS_PRINT_TO_FILE ##### -->
<para>

</para>


<!-- ##### MACRO GTK_RETLOC_BOOL ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_BOOL.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_BOXED ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_BOXED.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_CHAR ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_CHAR.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_DOUBLE ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_DOUBLE.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_ENUM ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_ENUM.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_FLAGS ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_FLAGS.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_FLOAT ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_FLOAT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_INT ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_INT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_LONG ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_LONG.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_OBJECT ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_OBJECT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_POINTER ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_POINTER.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_STRING ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_STRING.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_UCHAR ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_UCHAR.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_UINT ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_UINT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_RETLOC_ULONG ##### -->
<para>
If the #GtkArg contains a pointer to the value, this macro will be a pointer to a %GTK_TYPE_ULONG.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_SIGNAL_FUNC ##### -->
<para>
Just a macroized cast into a #GtkSignalFunc.
</para>

@f: 

<!-- ##### MACRO GTK_STOCK_BUTTON_APPLY ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_CANCEL ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_CLOSE ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_NO ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_OK ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_YES ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STRUCT_OFFSET ##### -->
<para>
Use in place of <function>offsetof()</function>, which is used if it exists.
</para>

@Deprecated: Use G_STRUCT_OFFSET() instead.

<!-- ##### MACRO GTK_TIPS_QUERY ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_TIPS_QUERY_CLASS ##### -->
<para>

</para>

@klass: 

<!-- ##### MACRO GTK_TIPS_QUERY_GET_CLASS ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_TREE_MODEL_GET_IFACE ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_TREE_SELECTION ##### -->
<para>
A macro that returns a GList that contains the selection of the root tree of @obj.
</para>

@obj: A pointer to the #GtkTree. @obj will accept any pointer, but it the pointer does not point to a #GtkTree, the results are undefined.

<!-- ##### MACRO GTK_TYPE_FLAT_FIRST ##### -->
<para>
The first "flat" (no struct) enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_FLAT_LAST ##### -->
<para>
The last "flat" (no struct) enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_FUNDAMENTAL_LAST ##### -->
<para>
The highest-numbered structured or flat enumerated type value.
</para>

@Deprecated: Use #G_TYPE_LAST_RESERVED_FUNDAMENTAL - 1 instead.

<!-- ##### MACRO GTK_TYPE_FUNDAMENTAL_MAX ##### -->
<para>
The maximum fundamental enumerated type value.
</para>

@Deprecated: Use #G_TYPE_FUNDAMENTAL_MAX instead.

<!-- ##### MACRO GTK_TYPE_IDENTIFIER ##### -->
<para>
Hide the name of gtk_identifier_get_type
</para>


<!-- ##### MACRO GTK_TYPE_IS_OBJECT ##### -->
<para>
Returns %TRUE if @type is a %GTK_TYPE_OBJECT.
</para>

@type: a #GtkType.
@Deprecated: Use G_TYPE_IS_OBJECT() instead.

<!-- ##### MACRO GTK_TYPE_MAKE ##### -->
<para>
Combine a fundemantal type and a sequence number to create a gtk type.
</para>

@parent_t: 
@seqno: 

<!-- ##### MACRO GTK_TYPE_NUM_BUILTINS ##### -->
<para>
No idea.
</para>


<!-- ##### MACRO GTK_TYPE_SEQNO ##### -->
<para>
Convert a gtk type into its sequence number
</para>

@type: 

<!-- ##### MACRO GTK_TYPE_STRUCTURED_FIRST ##### -->
<para>
The first structured enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_STRUCTURED_LAST ##### -->
<para>
The last structured enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_TIPS_QUERY ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_TREE_COLUMN ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_TREE_VIEW_COLUMN ##### -->
<para>

</para>


<!-- ##### MACRO GTK_VALUE_ARGS ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_ARGS
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_BOOL ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_BOOL.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_BOXED ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_BOXED.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_CALLBACK
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_CHAR ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_CHAR.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_C_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_CALLBACK
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_DOUBLE ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_DOUBLE.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_ENUM ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_ENUM.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_FLAGS ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_FLAGS.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_FLOAT ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_FLOAT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_FOREIGN ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_FOREIGN
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_INT ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_INT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_LONG ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_LONG.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_OBJECT ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_OBJECT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_POINTER ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_POINTER.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_SIGNAL ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_SIGNAL.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_STRING ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_STRING.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_UCHAR ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_UCHAR.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_UINT ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_UINT.
</para>

@a: a #GtkArg.

<!-- ##### MACRO GTK_VALUE_ULONG ##### -->
<para>
Gets the value of a #GtkArg whose #GtkType is %GTK_TYPE_ULONG.
</para>

@a: a #GtkArg.

<!-- ##### USER_FUNCTION GValueCompareFunc ##### -->
<para>

</para>

@a: 
@b: 
@Returns: 

<!-- ##### ARG GtkAboutDialog:link-color ##### -->
<para>

</para>


<!-- ##### ARG GtkAboutDialog:name ##### -->
<para>

</para>


<!-- ##### STRUCT GtkAccelEntry ##### -->
<para>
This is a private struct used by GTK+ internally, don't worry about it.
</para>

@accel_group: 
@accelerator_key: 
@accelerator_mods: 
@accel_flags: 
@object: 
@signal_id: 

<!-- ##### ARG GtkAccelLabel:accel-object ##### -->
<para>

</para>


<!-- ##### ARG GtkAccelLabel:accel-width ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkAccelMapNotify ##### -->
<para>

</para>

@data: 
@accel_path_quark: 
@accel_key: 
@accel_mods: 
@accel_group: 
@old_accel_key: 
@old_accel_mods: 

<!-- ##### SIGNAL GtkAction::connect-proxy ##### -->
<para>

</para>

@action: the object which received the signal.
@widget: 

<!-- ##### SIGNAL GtkAction::disconnect-proxy ##### -->
<para>

</para>

@action: the object which received the signal.
@widget: 

<!-- ##### ENUM GtkArgFlags ##### -->
<para>
Possible flags indicating how an argument should be treated.
</para>

@GTK_ARG_READABLE: the argument is readable. (i.e. can be queried)
@GTK_ARG_WRITABLE: the argument is writable. (i.e. settable)
@GTK_ARG_CONSTRUCT: the argument needs construction.
@GTK_ARG_CONSTRUCT_ONLY: the argument needs construction (and will
be set once during object creation), but is otherwise cannot be
set.  Hence this flag is not allowed with #GTK_ARG_WRITABLE,
and is redundant with #GTK_ARG_CONSTRUCT.
@GTK_ARG_CHILD_ARG: an argument type that applies to (and may be different for)
each child.  Used by #GtkContainer.
@Deprecated: Use corresponding #GParamSpec features instead

<!-- ##### USER_FUNCTION GtkArgGetFunc ##### -->
<para>
Define a function pointer.  Deprecated.
</para>

@object: 
@arg: 
@arg_id: 

<!-- ##### STRUCT GtkArgInfo ##### -->
<para>
A structure containing information about the argument.
Returned by gtk_arg_get_info().
</para>

@class_type: if the argument is an object, this is the object class type.
@name: the name of the argument.
@type: the type of the argument; it may be an object's type
or a fundamental type.
@arg_flags: flags applicable to the argument (i.e. readable, writable,
and whether it needs to be constructed).
@full_name: the object name and argument name separated by ::,
e.g. "GtkObject::user_data" or "GtkButton::label".
@arg_id: the unique argument identified.
@seq_id: ???

<!-- ##### USER_FUNCTION GtkArgSetFunc ##### -->
<para>
Define a function pointer.  Deprecated.
</para>

@object: 
@arg: 
@arg_id: 

<!-- ##### STRUCT GtkBuilderClass ##### -->
<para>

</para>

@get_type_from_name: Looks up a type by name. The default
  implementation applies heuristics to map type names to
  <function>_get_type</function> function names, e.g. 
  GtkHBox to gtk_hbox_get_type(). This virtual function
  is provided to allow language bindings to intercept the
  type resolution process.

<!-- ##### ENUM GtkButtonAction ##### -->
<para>
Values for specifying what mouse button events a CList will
react to.
</para>

@GTK_BUTTON_IGNORED: 
@GTK_BUTTON_SELECTS: 
@GTK_BUTTON_DRAGS: 
@GTK_BUTTON_EXPANDS: 

<!-- ##### STRUCT GtkCList ##### -->
<para>
This is the embodiment of the #GtkCList widget.  This structure contains
only private data, and should be accessed only via the CList API.
</para>


<!-- ##### SIGNAL GtkCList::abort-column-resize ##### -->
<para>
This signal is emitted when a column resize is aborted.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::click-column ##### -->
<para>
This signal is emitted when a column title is clicked.
</para>

@clist: The object which received the signal.
@column: The number of the column.

<!-- ##### SIGNAL GtkCList::end-selection ##### -->
<para>
This signal is emitted when a selection ends in a 
multiple selection CList.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::extend-selection ##### -->
<para>
This signal is emitted when the selection is extended.
</para>

@clist: the object which received the signal.
@scroll_type: A #GtkScrollType value of any scrolling operation the
occured during the selection.
@position: A value between 0.0 and 1.0.
@auto_start_selection: %TRUE or %FALSE.

<!-- ##### SIGNAL GtkCList::resize-column ##### -->
<para>
This signal is emitted when a column is resized.
</para>

@clist: The object which received the signal.
@column: The number of the column
@width: The new width of the column.

<!-- ##### SIGNAL GtkCList::row-move ##### -->
<para>
This signal is emitted when a row is moved.
</para>

@clist: The object which received the signal.
@arg1: The source position of the row.
@arg2: The destination position of the row.

<!-- ##### SIGNAL GtkCList::scroll-horizontal ##### -->
<para>
This signal is emitted when the CList is scrolled horizontally.
</para>

@clist: the object which received the signal.
@scroll_type: A #GtkScrollType value of how the scroll operation occured.
@position: a value between 0.0 and 1.0.

<!-- ##### SIGNAL GtkCList::scroll-vertical ##### -->
<para>
This signal is emitted when the CList is scrolled vertically.
</para>

@clist: the object which received the signal.
@scroll_type: A #GtkScrollType value of how the scroll operation occured.
@position: A value between 0.0 and 1.0.

<!-- ##### SIGNAL GtkCList::select-all ##### -->
<para>
This signal is emitted when all the rows are selected in a CList.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::select-row ##### -->
<para>
This signal is emitted when the user selects a row in the list.  
It is emitted for every row that is selected in a multi-selection or
by calling gtk_clist_select_all().
</para>

@clist: The object which received the signal.
@row: The row selected.
@column: The column where the selection occured.
@event: A #GdkEvent structure for the selection.

<!-- ##### SIGNAL GtkCList::set-scroll-adjustments ##### -->
<para>

</para>

@clist: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GtkCList::start-selection ##### -->
<para>
This signal is emitted when a drag-selection is started in 
a multiple-selection CList.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::toggle-add-mode ##### -->
<para>
This signal is emitted when "add mode" is toggled.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::toggle-focus-row ##### -->
<para>

</para>

@clist: The object which received the signal.

<!-- ##### SIGNAL GtkCList::undo-selection ##### -->
<para>
This signal is emitted when an undo selection occurs in the CList,
probably via calling gtk_clist_undo_selection().
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::unselect-all ##### -->
<para>
This signal is emitted when all rows are unselected in a CList.
</para>

@clist: the object which received the signal.

<!-- ##### SIGNAL GtkCList::unselect-row ##### -->
<para>
This signal is emitted when the user unselects a row in the list.  
It is emitted for every row that is unselected in a multi-selection or
by calling gtk_clist_unselect_all().  It is also emitted for the
previously selected row in a "single" or "browse" mode CList.
</para>

@clist: The object which received the signal.
@row: The selected row
@column: The column where the selection occured.
@event: 

<!-- ##### ARG GtkCList:n-columns ##### -->
<para>
An integer value for a column.
</para>


<!-- ##### ARG GtkCList:reorderable ##### -->
<para>
A boolean value for determining if the user can re-order the CList's
columns.
</para>


<!-- ##### ARG GtkCList:row-height ##### -->
<para>
An integer value representing the height of a row in pixels.
</para>


<!-- ##### ARG GtkCList:selection-mode ##### -->
<para>
Sets the type of selection mode for the CList.
</para>


<!-- ##### ARG GtkCList:shadow-type ##### -->
<para>
Sets the shadowing for the CList.
</para>


<!-- ##### ARG GtkCList:sort-type ##### -->
<para>

</para>


<!-- ##### ARG GtkCList:titles-active ##### -->
<para>
A boolean value for setting whether the column titles can be
clicked.
</para>


<!-- ##### ARG GtkCList:use-drag-icons ##### -->
<para>
A boolean value for setting whether to use icons during drag
operations.
</para>


<!-- ##### STRUCT GtkCListCellInfo ##### -->
<para>
A simple structure that the #GtkCList widget uses to keep track
of the location of a cell.
</para>

@row: 
@column: 

<!-- ##### STRUCT GtkCListColumn ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of information
about its columns.
</para>

@title: 
@area: 
@button: 
@window: 
@width: 
@min_width: 
@max_width: 
@justification: 
@visible: 
@width_set: 
@resizeable: 
@auto_resize: 
@button_passive: 

<!-- ##### USER_FUNCTION GtkCListCompareFunc ##### -->
<para>
Function prototype for the compare function callback.
</para>

@clist: The #GtkCList that is affected.
@ptr1: A #gconstpointer to the first node to compare.
@ptr2: A #gconstpointer to the second node to compare.
@Returns: 0 if the nodes are equal, less than 0 if the first node should
come before the second, and greater than 1 if the second come before the
first.

<!-- ##### STRUCT GtkCListDestInfo ##### -->
<para>
A simple structure that the #GtkCList widget uses to track 
a cell for a drag operation.
</para>

@cell: 
@insert_pos: 

<!-- ##### ENUM GtkCListDragPos ##### -->
<para>
An enumeration for drag operations.
</para>

@GTK_CLIST_DRAG_NONE: 
@GTK_CLIST_DRAG_BEFORE: 
@GTK_CLIST_DRAG_INTO: 
@GTK_CLIST_DRAG_AFTER: 

<!-- ##### STRUCT GtkCListRow ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of information
about its rows.
</para>

@cell: 
@state: 
@foreground: 
@background: 
@style: 
@data: 
@destroy: 
@fg_set: 
@bg_set: 
@selectable: 

<!-- ##### STRUCT GtkCell ##### -->
<para>
A generic structure that the #GtkCList widget uses to keep track of the
contents of each of its cells.
</para>

@type: 
@vertical: 
@horizontal: 
@style: 
@widget: 

<!-- ##### STRUCT GtkCellPixText ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of #GtkCList cells
that contain a combination of text and a GdkPixmap.
</para>

@type: 
@vertical: 
@horizontal: 
@style: 
@text: 
@spacing: 
@pixmap: 
@mask: 

<!-- ##### STRUCT GtkCellPixmap ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of #GtkCList cells
that contain a GdkPixmap.
</para>

@type: 
@vertical: 
@horizontal: 
@style: 
@pixmap: 
@mask: 

<!-- ##### STRUCT GtkCellRendererTextPixbuf ##### -->
<para>

</para>

@parent: 

<!-- ##### STRUCT GtkCellText ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of #GtkCList cells
that contain text.
</para>

@type: 
@vertical: 
@horizontal: 
@style: 
@text: 

<!-- ##### ENUM GtkCellType ##### -->
<para>
Identifies the type of element in the current cell of the CList.  Cells can
contain text, pixmaps, or both. Unfortunately support for %GTK_CELL_WIDGET
was never completed.
</para>

@GTK_CELL_EMPTY: 
@GTK_CELL_TEXT: 
@GTK_CELL_PIXMAP: 
@GTK_CELL_PIXTEXT: 
@GTK_CELL_WIDGET: 

<!-- ##### ARG GtkCellView:use-fg ##### -->
<para>

</para>


<!-- ##### STRUCT GtkCellWidget ##### -->
<para>
A structure that the #GtkCList widget uses to keep track of #GtkCList cells
that contain another widget.
</para>

@type: 
@vertical: 
@horizontal: 
@style: 
@widget: 

<!-- ##### TYPEDEF GtkClassInitFunc ##### -->
<para>
Defines a function pointer.
</para>


<!-- ##### ARG GtkColorSelection:previous-alpha ##### -->
<para>

</para>


<!-- ##### ARG GtkColorSelection:previous-color ##### -->
<para>

</para>


<!-- ##### STRUCT GtkCombo ##### -->
<para>
The #GtkCombo-struct struct contains the following fields.
(These fields should be considered read-only. They should never be set by
an application.)
</para>

@entry: the text entry field.
@list: the list shown in the drop-down window.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### ARG GtkCombo:allow-empty ##### -->
<para>

</para>


<!-- ##### ARG GtkCombo:case-sensitive ##### -->
<para>

</para>


<!-- ##### ARG GtkCombo:enable-arrow-keys ##### -->
<para>

</para>


<!-- ##### ARG GtkCombo:enable-arrows-always ##### -->
<para>

</para>


<!-- ##### ARG GtkCombo:value-in-list ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkComboBox::popup-hide ##### -->
<para>

</para>

@combobox: the object which received the signal.

<!-- ##### SIGNAL GtkComboBox::popup-show ##### -->
<para>

</para>

@combobox: the object which received the signal.

<!-- ##### ARG GtkComboBox:appearance ##### -->
<para>

</para>


<!-- ##### ARG GtkComboBox:row-separator-column ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkContainer::focus ##### -->
<para>

</para>

@container: the object which received the signal.
@direction: 
@Returns: 

<!-- ##### ARG GtkContainer:reallocate-redraws ##### -->
<para>

</para>


<!-- ##### STRUCT GtkData ##### -->
<para>
The #GtkData-struct struct contains no public fields.
</para>


<!-- ##### SIGNAL GtkData::disconnect ##### -->
<para>
Emitted to notify any views on the #GtkData object to disconnect from it,
possibly because the #GtkData object is about to be destroyed.
</para>

@data: the object which received the signal.

<!-- ##### USER_FUNCTION GtkDestroyNotify ##### -->
<para>
Defines a function pointer.
</para>

@data: #gpointer

<!-- ##### UNION GtkDitherInfo ##### -->
<para>
This union not used in GTK+.
</para>


<!-- ##### SIGNAL GtkEditable::activate ##### -->
<para>
Indicates that the user has activated the widget
in some fashion. Generally, this will be done
with a keystroke. (The default binding for this
action is Return for #GtkEntry and
Control-Return for #GtkText.)
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::copy-clipboard ##### -->
<para>
An action signal. Causes the characters in the current selection to
be copied to the clipboard.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::cut-clipboard ##### -->
<para>
An action signal. Causes the characters in the current
selection to be copied to the clipboard and then deleted from
the widget.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::kill-char ##### -->
<para>
An action signal. Delete a single character.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::kill-line ##### -->
<para>
An action signal. Delete a single line.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::kill-word ##### -->
<para>
An action signal. Delete a single word.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::move-cursor ##### -->
<para>
An action signal. Move the cursor position.
</para>

@editable: the object which received the signal.
@x: horizontal distance to move the cursor.
@y: vertical distance to move the cursor.

<!-- ##### SIGNAL GtkEditable::move-page ##### -->
<para>
An action signal. Move the cursor by pages.
</para>

@editable: the object which received the signal.
@x: Number of pages to move the cursor horizontally.
@y: Number of pages to move the cursor vertically.

<!-- ##### SIGNAL GtkEditable::move-to-column ##### -->
<para>
An action signal. Move the cursor to the given column.
</para>

@editable: the object which received the signal.
@column: the column to move to. (A negative value indicates
         the last column)

<!-- ##### SIGNAL GtkEditable::move-to-row ##### -->
<para>
An action signal. Move the cursor to the given row.
</para>

@editable: the object which received the signal.
@row: the row to move to. (A negative value indicates 
      the last row)

<!-- ##### SIGNAL GtkEditable::move-word ##### -->
<para>
An action signal. Move the cursor by words.
</para>

@editable: the object which received the signal.
@num_words: The number of words to move the
cursor. (Can be negative).

<!-- ##### SIGNAL GtkEditable::paste-clipboard ##### -->
<para>
An action signal. Causes the contents of the clipboard to
be pasted into the editable widget at the current cursor
position.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::set-editable ##### -->
<para>
Determines if the user can edit the text in the editable
widget or not. This is meant to be overriden by 
child classes and should not generally useful to
applications.
</para>

@editable: the object which received the signal.
@is_editable: %TRUE if the user is allowed to edit the text
  in the widget.

<!-- ##### ARG GtkEditable:editable ##### -->
<para>
A boolean indicating whether the widget is editable by
the user.
</para>


<!-- ##### ARG GtkEditable:text-position ##### -->
<para>
The position of the cursor.
</para>


<!-- ##### USER_FUNCTION GtkEmissionHook ##### -->
<para>
A simple function pointer to get invoked when the
signal is emitted.  This allows you tie a hook to the signal type,
so that it will trap all emissions of that signal, from any object.
</para>
<para>
You may not attach these to signals created with the
#GTK_RUN_NO_HOOKS flag.
</para>

@object: 
@signal_id: 
@n_params: 
@params: 
@data: 
@Returns: 

<!-- ##### SIGNAL GtkEntry::changed ##### -->
<para>

</para>

@entry: the object which received the signal.

<!-- ##### SIGNAL GtkEntry::delete-text ##### -->
<para>

</para>

@entry: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GtkEntry::icon-pressed ##### -->
<para>

</para>

@entry: the object which received the signal.
@arg1: 
@event: 

<!-- ##### SIGNAL GtkEntry::icon-released ##### -->
<para>

</para>

@entry: the object which received the signal.
@arg1: 
@event: 

<!-- ##### SIGNAL GtkEntry::insert-text ##### -->
<para>

</para>

@entry: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### ARG GtkEntry:activatable-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:activatable-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:gicon-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:gicon-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:icon-name-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:icon-name-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:pixbuf-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:pixbuf-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:prelight ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:sensitive-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:sensitive-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:stock-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:stock-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:storage-type-primary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:storage-type-secondary ##### -->
<para>

</para>


<!-- ##### ARG GtkEntry:text-position ##### -->
<para>

</para>


<!-- ##### STRUCT GtkEntryBufferClass ##### -->
<para>

</para>

@parent_class: 
@inserted_text: 
@deleted_text: 
@get_text: 
@get_length: 
@insert_text: 
@delete_text: 
@_gtk_reserved0: 
@_gtk_reserved1: 
@_gtk_reserved2: 
@_gtk_reserved3: 
@_gtk_reserved4: 
@_gtk_reserved5: 

<!-- ##### TYPEDEF GtkEnumValue ##### -->
<para>
A structure which contains a single enum value, and its name, and its
nickname.
</para>


<!-- ##### ARG GtkFileChooser:file-system ##### -->
<para>

</para>


<!-- ##### STRUCT GtkFileSelection ##### -->
<para>
The #GtkFileSelection struct contains the following #GtkWidget fields:
</para>

@dir_list: 
@file_list: 
@selection_entry: 
@selection_text: 
@main_vbox: 
@ok_button: 
@cancel_button: the two main buttons that signals should be connected 
    to in order to perform an action when the user hits either OK or 
    Cancel.
@help_button: 
@history_pulldown: the #GtkOptionMenu used to create the drop-down 
    directory history.
@history_menu: 
@history_list: 
@fileop_dialog: the dialog box used to display the #GtkFileSelection. 
   It can be customized by adding/removing widgets from it using the 
   standard #GtkDialog functions.
@fileop_entry: 
@fileop_file: 
@cmpl_state: 
@fileop_c_dir: 
@fileop_del_file: 
@fileop_ren_file: the buttons that appear at the top of the file 
    selection dialog. These "operation buttons" can be hidden and 
    redisplayed with gtk_file_selection_hide_fileop_buttons() and  
    gtk_file_selection_show_fileop_buttons() respectively.
@button_area: 
@action_area: 

<!-- ##### ARG GtkFileSelection:filename ##### -->
<para>

</para>


<!-- ##### ARG GtkFileSelection:select-multiple ##### -->
<para>

</para>


<!-- ##### ARG GtkFileSelection:show-fileops ##### -->
<para>

</para>


<!-- ##### STRUCT GtkFixedChild ##### -->
<para>
The #GtkFixedChild-struct struct contains the following fields.
(These fields should be considered read-only. They should never be set by
an application.)

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>#GtkWidget *widget;</entry>
<entry>the child #GtkWidget.</entry>
</row>

<row>
<entry>#gint x;</entry>
<entry>the horizontal position of the widget within the #GtkFixed
container.</entry>
</row>

<row>
<entry>#gint y;</entry>
<entry>the vertical position of the widget within the #GtkFixed
container.</entry>
</row>

</tbody></tgroup></informaltable>
</para>

@widget: 
@x: 
@y: 

<!-- ##### TYPEDEF GtkFlagValue ##### -->
<para>

</para>


<!-- ##### ENUM GtkFontFilterType ##### -->
<para>
A set of bit flags used to specify the filter being set
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_FILTER_BASE: the base filter, which can't be changed by the user.
@GTK_FONT_FILTER_USER: the user filter, which can be changed from within the
'Filter' page of the #GtkFontSelection widget.

<!-- ##### ENUM GtkFontType ##### -->
<para>
A set of bit flags used to specify the type of fonts shown
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_BITMAP: bitmap fonts.
@GTK_FONT_SCALABLE: scalable fonts.
@GTK_FONT_SCALABLE_BITMAP: scaled bitmap fonts.
@GTK_FONT_ALL: a bitwise combination of all of the above.

<!-- ##### TYPEDEF GtkFundamentalType ##### -->
<para>
#GtkFundamentalType is an enumerated type which lists all the possible
fundamental types (e.g. <type>char</type>, <type>uchar</type>, <type>int</type>,
<type>long</type>, <type>float</type>, etc).
</para>


<!-- ##### ARG GtkHScale:adjustment ##### -->
<para>
the #GtkAdjustment which sets the range of the scale.
</para>


<!-- ##### ARG GtkHScrollbar:adjustment ##### -->
<para>

</para>


<!-- ##### STRUCT GtkIconViewPrivate ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkImageLoader ##### -->
<para>
A GtkImageLoader is used to load a filename found in
a RC file.
</para>

@window: the window for creating image
@colormap: the colormap for this image
@mask: a pointer to the location to store the mask
@transparent_color: the transparent color for the image
@filename: filename to load
@Returns: a #GtkPixmap representing @filename

<!-- ##### STRUCT GtkImageMenuItemClass ##### -->
<para>

</para>


<!-- ##### STRUCT GtkItemFactory ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkItemFactoryCallback ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkItemFactoryCallback1 ##### -->
<para>

</para>

@callback_data: 
@callback_action: 
@widget: 

<!-- ##### USER_FUNCTION GtkItemFactoryCallback2 ##### -->
<para>

</para>

@widget: 
@callback_data: 
@callback_action: 

<!-- ##### STRUCT GtkItemFactoryEntry ##### -->
<para>

</para>

@path: 
@accelerator: 
@callback: 
@callback_action: 
@item_type: 
@extra_data: 

<!-- ##### STRUCT GtkItemFactoryItem ##### -->
<para>

</para>

@path: 
@widgets: 

<!-- ##### ARG GtkLabel:accel-keyval ##### -->
<para>

</para>


<!-- ##### STRUCT GtkList ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkList::select-child ##### -->
<para>
The child @widget has just been selected.
</para>

@list: the object which received the signal.
@widget: the newly selected child.

<!-- ##### SIGNAL GtkList::selection-changed ##### -->
<para>
The selection of the widget has just changed.
</para>

@list: the object which received the signal.

<!-- ##### SIGNAL GtkList::unselect-child ##### -->
<para>
The child @widget has just been unselected.
</para>

@list: the object which received the signal.
@widget: the newly unselected child.

<!-- ##### ARG GtkList:selection-mode ##### -->
<para>

</para>


<!-- ##### STRUCT GtkListItem ##### -->
<para>
The #GtkListItem struct contains private data only, and should
only be accessed using the functions below.
</para>


<!-- ##### SIGNAL GtkListItem::end-selection ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::extend-selection ##### -->
<para>

</para>

@listitem: the object which received the signal.
@scroll_type: 
@position: 
@auto_start_selection: 

<!-- ##### SIGNAL GtkListItem::scroll-horizontal ##### -->
<para>

</para>

@listitem: the object which received the signal.
@scroll_type: 
@position: 

<!-- ##### SIGNAL GtkListItem::scroll-vertical ##### -->
<para>

</para>

@listitem: the object which received the signal.
@scroll_type: 
@position: 

<!-- ##### SIGNAL GtkListItem::select-all ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::start-selection ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::toggle-add-mode ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::toggle-focus-row ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::undo-selection ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### SIGNAL GtkListItem::unselect-all ##### -->
<para>

</para>

@listitem: the object which received the signal.

<!-- ##### ENUM GtkMatchType ##### -->
<para>

</para>

@GTK_MATCH_ALL: 
@GTK_MATCH_ALL_TAIL: 
@GTK_MATCH_HEAD: 
@GTK_MATCH_TAIL: 
@GTK_MATCH_EXACT: 
@GTK_MATCH_LAST: 

<!-- ##### SIGNAL GtkMenuBar::cycle-focus ##### -->
<para>

</para>

@menubar: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GtkNotebook::tab-added ##### -->
<para>

</para>

@notebook: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GtkNotebook::tab-removed ##### -->
<para>

</para>

@notebook: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GtkNotebook::tab-reordered ##### -->
<para>

</para>

@notebook: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### ARG GtkNotebook:group-id ##### -->
<para>

</para>


<!-- ##### ARG GtkNotebook:homogeneous ##### -->
<para>

</para>


<!-- ##### ARG GtkNotebook:tab-border ##### -->
<para>

</para>


<!-- ##### ARG GtkNotebook:tab-hborder ##### -->
<para>

</para>


<!-- ##### ARG GtkNotebook:tab-vborder ##### -->
<para>

</para>


<!-- ##### ARG GtkObject:object-signal ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the user data and objects
and swapped when the signal handler is invoked.
</para>
<para>
This is useful for handlers that are primarily notifying
other objects and could just invoke an already existing function
if the parameters were swapped.
See g_signal_connect_swapped() for more details.
</para>


<!-- ##### ARG GtkObject:object-signal-after ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the user data and objects
and swapped when the signal handler is invoked,
and so that the handler is invoked after all others.
</para>
<para>
See g_signal_connect_data() for more details.
</para>


<!-- ##### ARG GtkObject:signal ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object.
</para>


<!-- ##### ARG GtkObject:signal-after ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the signal is always run
after other user handlers and the default handler.
</para>


<!-- ##### ARG GtkObject:user-data ##### -->
<para>

</para>


<!-- ##### TYPEDEF GtkObjectInitFunc ##### -->
<para>
Defines a function pointer.
</para>


<!-- ##### SIGNAL GtkOldEditable::changed ##### -->
<para>

</para>

@oldeditable: the object which received the signal.

<!-- ##### SIGNAL GtkOldEditable::delete-text ##### -->
<para>

</para>

@oldeditable: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GtkOldEditable::insert-text ##### -->
<para>

</para>

@oldeditable: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### STRUCT GtkPacker ##### -->
<para>

</para>

@parent: 
@children: 
@spacing: 
@default_border_width: 
@default_pad_x: 
@default_pad_y: 
@default_i_pad_x: 
@default_i_pad_y: 

<!-- ##### ARG GtkPacker:default-border-width ##### -->
<para>

</para>


<!-- ##### ARG GtkPacker:default-ipad-x ##### -->
<para>

</para>


<!-- ##### ARG GtkPacker:default-ipad-y ##### -->
<para>

</para>


<!-- ##### ARG GtkPacker:default-pad-x ##### -->
<para>

</para>


<!-- ##### ARG GtkPacker:default-pad-y ##### -->
<para>

</para>


<!-- ##### ARG GtkPacker:spacing ##### -->
<para>

</para>


<!-- ##### STRUCT GtkPackerChild ##### -->
<para>

</para>

@widget: 
@anchor: 
@side: 
@options: 
@use_default: 
@border_width: 
@pad_x: 
@pad_y: 
@i_pad_x: 
@i_pad_y: 

<!-- ##### ENUM GtkPackerOptions ##### -->
<para>

</para>

@GTK_PACK_EXPAND: 
@GTK_FILL_X: 
@GTK_FILL_Y: 

<!-- ##### STRUCT GtkPatternSpec ##### -->
<para>

</para>

@match_type: 
@pattern_length: 
@pattern: 
@pattern_reversed: 
@user_data: 
@seq_id: 

<!-- ##### STRUCT GtkPreview ##### -->
<para>
The #GtkPreview-struct struct contains private data only, and
should be accessed using the functions below.
</para>


<!-- ##### ARG GtkPreview:expand ##### -->
<para>

</para>


<!-- ##### STRUCT GtkPreviewInfo ##### -->
<para>
Contains information about global properties
of preview widgets.

The #GtkPreviewInfo struct contains the following fields.
(These fields should be considered read-only. They should never be set by
an application.)

<informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2"><colspec colwidth="2*"/><colspec colwidth="8*"/>
<tbody>

<row>
<entry>#GdkVisual *visual;</entry>
<entry>the visual used by all previews.</entry>
</row>

<row>
<entry>#GdkColormap *cmap;</entry>
<entry>the colormap used by all previews.</entry>
</row>

<row>
<entry>gdouble gamma;</entry>
<entry>the gamma correction value used by all previews (See gtk_preview_set_gamma()).</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</para>

@lookup: 
@gamma: 

<!-- ##### ENUM GtkPreviewType ##### -->
<para>
An enumeration which describes whether a preview
contains grayscale or red-green-blue data.
</para>

@GTK_PREVIEW_COLOR: the preview contains red-green-blue data.
@GTK_PREVIEW_GRAYSCALE: The preview contains grayscale data.

<!-- ##### USER_FUNCTION GtkPrintFunc ##### -->
<para>

</para>

@func_data: 
@str: 

<!-- ##### ARG GtkPrintOperation:number-of-pages ##### -->
<para>

</para>


<!-- ##### ENUM GtkPrivateFlags ##### -->
<para>

</para>

@PRIVATE_GTK_USER_STYLE: 
@PRIVATE_GTK_RESIZE_PENDING: 
@PRIVATE_GTK_RESIZE_NEEDED: 
@PRIVATE_GTK_LEAVE_PENDING: 
@PRIVATE_GTK_HAS_SHAPE_MASK: 
@PRIVATE_GTK_IN_REPARENT: 
@PRIVATE_GTK_DIRECTION_SET: 
@PRIVATE_GTK_DIRECTION_LTR: 

<!-- ##### ARG GtkProgressBar:activity-blocks ##### -->
<para>

</para>


<!-- ##### ARG GtkProgressBar:activity-step ##### -->
<para>

</para>


<!-- ##### ARG GtkProgressBar:adjustment ##### -->
<para>

</para>


<!-- ##### ARG GtkProgressBar:bar-style ##### -->
<para>

</para>


<!-- ##### ARG GtkProgressBar:discrete-blocks ##### -->
<para>

</para>


<!-- ##### STRUCT GtkRcStyleClass ##### -->
<para>

</para>


<!-- ##### ARG GtkScaleButton:orientation ##### -->
<para>

</para>


<!-- ##### ARG GtkScrolledWindow:shadow ##### -->
<para>

</para>


<!-- ##### ARG GtkSettings:gtk-menu-bar-popout-delay ##### -->
<para>

</para>


<!-- ##### ARG GtkSettings:gtk-menu-popout-delay ##### -->
<para>

</para>


<!-- ##### ARG GtkSettings:gtk-menu-submenu-hysteresis ##### -->
<para>

</para>


<!-- ##### STRUCT GtkSettingsClass ##### -->
<para>

</para>


<!-- ##### ENUM GtkSideType ##### -->
<para>

</para>

@GTK_SIDE_TOP: 
@GTK_SIDE_BOTTOM: 
@GTK_SIDE_LEFT: 
@GTK_SIDE_RIGHT: 

<!-- ##### USER_FUNCTION GtkSignalDestroy ##### -->
<para>
A function which you can use to clean up when the
signal handler is destroyed.
</para>
<para>
For example, if your handler requires a few variables
that you made into a struct and allocated (using g_new()
or something), then you will probably want to free
it as soon as the hook is destroyed.  This will
allow you to do that. (For this in particular
it is convenient to pass g_free() as a #GtkSignalDestroy
function).
</para>

@data: The user data associated with the hook that is being
destroyed.

<!-- ##### USER_FUNCTION GtkSignalFunc ##### -->
<para>
Defines a function pointer.
</para>


<!-- ##### USER_FUNCTION GtkSignalMarshal ##### -->
<para>
This is currently a hack left in for a scheme wrapper library.
It may be removed.
</para>
<para>
Don't use it.
</para>

@object: The object which emits the signal.
@data: The user data associated with the hook.
@nparams: The number of parameters to the function.
@args: The actual values of the arguments.
@arg_types: The types of the arguments.
@return_type: The type of the return value from the function
or #GTK_TYPE_NONE for no return value.

<!-- ##### TYPEDEF GtkSignalMarshaller ##### -->
<para>
Defines a function pointer.
</para>


<!-- ##### STRUCT GtkSignalQuery ##### -->
<para>
This structure contains all the information about a particular
signal:  its name, the type it affects, the signature of the handlers,
and its unique identifying integer.
</para>

@object_type: 
@signal_id: 
@signal_name: 
@is_user_signal: 
@signal_flags: 
@return_val: 
@nparams: 
@params: 

<!-- ##### STRUCT GtkStatusbarMsg ##### -->
<para>
Holds the data for a statusbar message. <structfield>text</structfield> holds the actual text string. <structfield>context_id</structfield> is the context that this message is associated with, and <structfield>message_id</structfield> is this particular message's identifier. However, these fields should not be modified directly.
</para>

@text: 
@context_id: 
@message_id: 

<!-- ##### STRUCT GtkStyleClass ##### -->
<para>

</para>

@parent_class: 
@realize: 
@unrealize: 
@copy: 
@clone: 
@init_from_rc: 
@set_background: 
@render_icon: 
@draw_hline: 
@draw_vline: 
@draw_shadow: 
@draw_polygon: 
@draw_arrow: 
@draw_diamond: 
@draw_string: 
@draw_box: 
@draw_flat_box: 
@draw_check: 
@draw_option: 
@draw_tab: 
@draw_shadow_gap: 
@draw_box_gap: 
@draw_extension: 
@draw_focus: 
@draw_slider: 
@draw_handle: 
@draw_expander: 
@draw_layout: 
@draw_resize_grip: 
@_gtk_reserved1: 
@_gtk_reserved2: 
@_gtk_reserved3: 
@_gtk_reserved4: 
@_gtk_reserved5: 
@_gtk_reserved6: 
@_gtk_reserved7: 
@_gtk_reserved8: 
@_gtk_reserved9: 
@_gtk_reserved10: 
@_gtk_reserved11: 
@_gtk_reserved12: 

<!-- ##### STRUCT GtkTableChild ##### -->
<para>
The <structfield>widget</structfield> field is a pointer to the widget that 
this %GtkTableChild structure is keeping track of.
The <structfield>left_attach</structfield>,
<structfield>right_attach</structfield>,
<structfield>top_attach</structfield>, and
<structfield>bottom_attach</structfield> fields specify the row and column
numbers which make up the invisible rectangle that the child widget is packed into.
</para>
<para>
<structfield>xpadding</structfield> and <structfield>ypadding</structfield>
specify the space between this widget and the surrounding table cells.
</para>

@widget: 
@left_attach: 
@right_attach: 
@top_attach: 
@bottom_attach: 
@xpadding: 
@ypadding: 
@xexpand: 
@yexpand: 
@xshrink: 
@yshrink: 
@xfill: 
@yfill: 

<!-- ##### STRUCT GtkTableRowCol ##### -->
<para>
These fields should be considered read-only and not be modified directly.
</para>

@requisition: 
@allocation: 
@spacing: 
@need_expand: 
@need_shrink: 
@expand: 
@shrink: 
@empty: 

<!-- ##### STRUCT GtkTextBTreeNode ##### -->
<para>

</para>


<!-- ##### STRUCT GtkTextChildAnchorClass ##### -->
<para>

</para>


<!-- ##### ARG GtkTextTag:justify ##### -->
<para>
A #GtkJustification for the text. This is only used when the tag is
applied to the first character in a paragraph.
</para>


<!-- ##### ARG GtkTextTag:left-wrapped-line-margin ##### -->
<para>
Pixel width of the left margin of the text for lines after the first
line in a wrapped paragraph.
</para>


<!-- ##### ARG GtkTextTag:left-wrapped-line-margin-set ##### -->
<para>

</para>


<!-- ##### ARG GtkTextTag:offset ##### -->
<para>
Pixels to offset the text horizontally or vertically, useful to
produce superscript and subscript.
</para>


<!-- ##### SIGNAL GtkTextView::move-focus ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 

<!-- ##### ARG GtkTextView:height-lines ##### -->
<para>

</para>


<!-- ##### ARG GtkTextView:justify ##### -->
<para>

</para>


<!-- ##### ARG GtkTextView:width-columns ##### -->
<para>

</para>


<!-- ##### STRUCT GtkTipsQuery ##### -->
<para>
The #GtkTipsQuery-struct struct contains private data only, and
should be accessed using the functions below.
</para>


<!-- ##### SIGNAL GtkTipsQuery::start-query ##### -->
<para>
Emitted when the query is started.
</para>

@tipsquery: the object which received the signal.

<!-- ##### SIGNAL GtkTipsQuery::stop-query ##### -->
<para>
Emitted when the query is stopped.
</para>

@tipsquery: the object which received the signal.

<!-- ##### SIGNAL GtkTipsQuery::widget-entered ##### -->
<para>
Emitted when a widget is entered by the pointer while the query is in effect.
</para>

@tipsquery: the object which received the signal.
@widget: the widget that was entered by the pointer.
@tip_text: the widget's tooltip.
@tip_private: the widget's private tooltip (see gtk_tooltips_set_tip()).

<!-- ##### SIGNAL GtkTipsQuery::widget-selected ##### -->
<para>
Emitted when a widget is selected during a query.
</para>

@tipsquery: the object which received the signal.
@widget: the widget that was selected.
@tip_text: the widget's tooltip.
@tip_private: the widget's private tooltip (see gtk_tooltips_set_tip()).
@event: the button press or button release event.
@Returns: %TRUE if the query should be stopped.

<!-- ##### ARG GtkTipsQuery:caller ##### -->
<para>
The widget that starts the tips query, usually a button.
If it is selected while the query is in effect the query is automatically
stopped.
</para>


<!-- ##### ARG GtkTipsQuery:emit-always ##### -->
<para>
%TRUE if the widget-entered and widget-selected signals are emitted even when
the widget has no tooltip set.
</para>


<!-- ##### ARG GtkTipsQuery:label-inactive ##### -->
<para>
The text to display in the #GtkTipsQuery widget when the query is not in
effect.
</para>


<!-- ##### ARG GtkTipsQuery:label-no-tip ##### -->
<para>
The text to display in the #GtkTipsQuery widget when the query is running
and the widget that the pointer is over has no tooltip.
</para>


<!-- ##### ARG GtkToolButton:show-label-horizontally ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkToolItem::set-tooltip ##### -->
<para>

</para>

@toolitem: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 
@Returns: 

<!-- ##### SIGNAL GtkToolbar::move-focus ##### -->
<para>

</para>

@toolbar: the object which received the signal.
@arg1: 
@Returns: 

<!-- ##### ARG GtkToolbar:orientation ##### -->
<para>

</para>


<!-- ##### ARG GtkToolbar:pack-end ##### -->
<para>

</para>


<!-- ##### ARG GtkToolbar:tooltips ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkTranslateFunc ##### -->
<para>
The function used to translate messages in e.g. #GtkIconFactory
and #GtkActionGroup. 
</para>

@path: The id of the message. In #GtkItemFactory this will be a path
  from a #GtkItemFactoryEntry, in #GtkActionGroup, it will be a label
  or tooltip from a #GtkActionEntry.
@func_data: user data passed in when registering the function
@Returns: the translated message

<!-- ##### STRUCT GtkTreeSelectionClass ##### -->
<para>

</para>


<!-- ##### ENUM GtkTreeSelectionMode ##### -->
<para>

</para>

@GTK_TREE_SELECTION_SINGLE: 
@GTK_TREE_SELECTION_MULTI: 

<!-- ##### SIGNAL GtkTreeView::focus-column-header ##### -->
<para>

</para>

@treeview: the object which received the signal.

<!-- ##### USER_FUNCTION GtkTreeViewDraggableFunc ##### -->
<para>

</para>

@tree_view: 
@context: 
@path: 
@user_data: 
@Returns: 

<!-- ##### USER_FUNCTION GtkTreeViewDroppableFunc ##### -->
<para>

</para>

@tree_view: 
@context: 
@path: 
@pos: 
@user_data: 
@Returns: 

<!-- ##### TYPEDEF GtkType ##### -->
<para>
#GtkType is unique integer identifying the type.  The guts of the
information about the type is held in a private struct named
#GtkTypeNode.
</para>


<!-- ##### TYPEDEF GtkTypeClass ##### -->
<para>
The base structure for a GTK+ type. Every type inherits this as a base structure.
</para>


<!-- ##### STRUCT GtkTypeInfo ##### -->
<para>
Holds information about the type.  gtk_type_name() returns the name.
@object_size is somehow set to the number of bytes that an instance of
the object will occupy.  @class_init_func holds the type's
initialization function.  @object_init_func holds the initialization
function for an instance of the object.  @reserved_1 is used for
#GtkEnumValue to hold the enumerated values.
</para>

@type_name: 
@object_size: 
@class_size: 
@class_init_func: 
@object_init_func: 
@reserved_1: 
@reserved_2: 
@base_class_init_func: 

<!-- ##### TYPEDEF GtkTypeObject ##### -->
<para>
A #GtkTypeObject defines the minimum structure requirements
for type instances. Type instances returned from gtk_type_new ()
and initialized through a #GtkObjectInitFunc need to directly inherit
from this structure or at least copy its fields one by one.
</para>


<!-- ##### SIGNAL GtkUIManager::changed ##### -->
<para>

</para>

@uimanager: the object which received the signal.

<!-- ##### ARG GtkVScale:adjustment ##### -->
<para>
the #GtkAdjustment which sets the range of the scale.
</para>


<!-- ##### ARG GtkVScrollbar:adjustment ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkWidget::activate-mnemonic ##### -->
<para>

</para>

@widget: the object which received the signal.
@arg1: 
@Returns: 

<!-- ##### SIGNAL GtkWidget::add-accelerator ##### -->
<para>

</para>

@widget: the object which received the signal.
@accel_signal_id: 
@accel_group: 
@accel_key: 
@accel_mods: 
@accel_flags: 

<!-- ##### SIGNAL GtkWidget::debug-msg ##### -->
<para>

</para>

@widget: the object which received the signal.
@message: 

<!-- ##### SIGNAL GtkWidget::draw ##### -->
<para>

</para>

@widget: the object which received the signal.
@area: 

<!-- ##### SIGNAL GtkWidget::draw-default ##### -->
<para>

</para>

@widget: the object which received the signal.

<!-- ##### SIGNAL GtkWidget::draw-focus ##### -->
<para>

</para>

@widget: the object which received the signal.

<!-- ##### SIGNAL GtkWidget::remove-accelerator ##### -->
<para>

</para>

@widget: the object which received the signal.
@accel_group: 
@accel_key: 
@accel_mods: 

<!-- ##### ARG GtkWidget:height ##### -->
<para>

</para>


<!-- ##### ARG GtkWidget:width ##### -->
<para>

</para>


<!-- ##### ARG GtkWidget:x ##### -->
<para>

</para>


<!-- ##### ARG GtkWidget:y ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkWindow::accels-changed ##### -->
<para>

</para>

@window: the object which received the signal.

<!-- ##### SIGNAL GtkWindow::move-focus ##### -->
<para>

</para>

@window: the object which received the signal.
@arg1: 

<!-- ##### ARG GtkWindow:auto-shrink ##### -->
<para>
If the window shrinks automatically when widgets within it shrink.
</para>


<!-- ##### ARG GtkWindow:icon-list ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_accel_group_add ##### -->
<para>

</para>

@accel_group: 
@path: 
@accel_key: 
@accel_mods: 
@accel_flags: 
@object: 
@accel_signal: 

<!-- ##### FUNCTION gtk_accel_group_attach ##### -->
<para>

</para>

@accel_group: 
@object: 

<!-- ##### FUNCTION gtk_accel_group_create_add ##### -->
<para>

</para>

@class_type: 
@signal_flags: 
@handler_offset: 
@Returns: 

<!-- ##### FUNCTION gtk_accel_group_create_remove ##### -->
<para>

</para>

@class_type: 
@signal_flags: 
@handler_offset: 
@Returns: 

<!-- ##### FUNCTION gtk_accel_group_detach ##### -->
<para>

</para>

@accel_group: 
@object: 

<!-- ##### FUNCTION gtk_accel_group_entries_from_object ##### -->
<para>

</para>

@object: 
@Returns: 

<!-- ##### FUNCTION gtk_accel_group_get_default ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_accel_group_get_entry ##### -->
<para>

</para>

@accel_group: 
@accel_key: 
@accel_mods: 
@Returns: 

<!-- ##### FUNCTION gtk_accel_group_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_accel_group_handle_add ##### -->
<para>

</para>

@object: 
@accel_signal_id: 
@accel_group: 
@accel_key: 
@accel_mods: 
@accel_flags: 

<!-- ##### FUNCTION gtk_accel_group_handle_remove ##### -->
<para>

</para>

@object: 
@accel_group: 
@accel_key: 
@accel_mods: 

<!-- ##### FUNCTION gtk_accel_group_lock_entry ##### -->
<para>

</para>

@accel_group: 
@accel_key: 
@accel_mods: 

<!-- ##### FUNCTION gtk_accel_group_remove ##### -->
<para>

</para>

@accel_group: 
@accel_key: 
@accel_mods: 
@object: 

<!-- ##### FUNCTION gtk_accel_group_unlock_entry ##### -->
<para>

</para>

@accel_group: 
@accel_key: 
@accel_mods: 

<!-- ##### FUNCTION gtk_accel_label_get_accel_object ##### -->
<para>

</para>

@accel_label: 
@Returns: 

<!-- ##### FUNCTION gtk_accel_label_set_accel_object ##### -->
<para>

</para>

@accel_label: 
@accel_object: 

<!-- ##### FUNCTION gtk_accel_map_add_notifer ##### -->
<para>

</para>

@accel_path: 
@notify_data: 
@notify_func: 
@accel_group: 

<!-- ##### FUNCTION gtk_accel_map_remove_notifer ##### -->
<para>

</para>

@accel_path: 
@notify_data: 
@notify_func: 

<!-- ##### FUNCTION gtk_arg_copy ##### -->
<para>
It will either copy data into an existing argument or allocate a new argument
and copy the data.  Strings are duplicated.  All other pointers and
values are copied (shallowly-- that is the pointers themselves are
copied, not the data they point to.)
</para>
<para>
You should call gtk_arg_reset() on dest_arg before calling this
if the argument may contain string data that you want freed.
</para>

@src_arg: the argument to duplicate.
@dest_arg: the argument to copy over (or NULL to create a new #GtkArg).
@Returns: the new #GtkArg (or dest_arg, if it was not NULL).

<!-- ##### FUNCTION gtk_arg_free ##### -->
<para>
Frees the argument, and optionally its contents.
</para>

@arg: the argument to free.
@free_contents: whether to free the string, if it is a string.

<!-- ##### FUNCTION gtk_arg_get_info ##### -->
<para>
Private: get information about an argument.
</para>

@object_type: the type of object.
@arg_info_hash_table: the hashtable of #GtkArgInfos.
@arg_name: the name of the argument to lookup.
@info_p: the argument info.
@Returns: an error message on failure, or NULL otherwise.

<!-- ##### FUNCTION gtk_arg_info_equal ##### -->
<para>
A #GCompareFunc for hashing #GtkArgInfos.
</para>

@arg_info_1: a #GtkArgInfo.
@arg_info_2: a #GtkArgInfo.
@Returns: whether the arguments are the same.

<!-- ##### FUNCTION gtk_arg_info_hash ##### -->
<para>
A #GHashFunc for hashing #GtkArgInfos.
</para>

@arg_info: a #GtkArgInfo.
@Returns: a hash value for that #GtkArgInfo.

<!-- ##### FUNCTION gtk_arg_name_strip_type ##### -->
<para>
Given a fully qualified argument name (e.g. "GtkButton::label")
it returns just the argument name (e.g. "label") unless
the argument name was invalid, in which case it returns NULL.
</para>

@arg_name: the fully-qualified argument name.
@Returns: the base argument name.

<!-- ##### FUNCTION gtk_arg_new ##### -->
<para>
Creates a new argument of a certain type, set to 0 or NULL.
</para>

@arg_type: the type of the argument.
@Returns: the newly created #GtkArg.

<!-- ##### FUNCTION gtk_arg_reset ##### -->
<para>

</para>

@arg: 

<!-- ##### FUNCTION gtk_arg_to_valueloc ##### -->
<para>

</para>

@arg: 
@value_pointer: 

<!-- ##### FUNCTION gtk_arg_type_new_static ##### -->
<para>
Create a new argument registered with a class.
</para>

@base_class_type: the basic type having the arguments, almost alway
GTK_TYPE_OBJECT, except if your defining a different type argument
that gets a different namespace.  #GtkContainer does this to define
per-child arguments of the container.
@arg_name: name of the argument to create.  (must be a static constant string)
@class_n_args_offset: offset into the base class structure that tells
the number of arguments.
@arg_info_hash_table: hashtable of #GtkArgInfos.
@arg_type: type of the argument.
@arg_flags: flags of the argument.
@arg_id: ???
@Returns: the new #GtkArgInfo.

<!-- ##### FUNCTION gtk_arg_values_equal ##### -->
<para>

</para>

@arg1: 
@arg2: 
@Returns: 

<!-- ##### FUNCTION gtk_args_collect ##### -->
<para>
Private:  given a hashtable of argument information it takes a vararg
list and parses it into arguments (in the form of lists of #GtkArgs
and lists of #GtkArgInfos.
</para>
<para>
The list of arguments starts with first_arg_name then the first argument's
value.  Followed by any number of additional name/argument pairs,
terminated with NULL.
</para>

@object_type: the type of object we are collecting arguments for.
@arg_info_hash_table: a hashtable mapping from names of arguments
to their #GtkArgInfos.
@arg_list_p: a returned list of arguments obtained from parsing the
varargs.
@info_list_p: a returned list of the #GtkArgInfos.
@first_arg_name: the name of the first argument.
@var_args: a va_list containing the value of the first argument,
followed by name/value pairs, followed by NULL.
@Returns: an error message on failure, or NULL otherwise.

<!-- ##### FUNCTION gtk_args_collect_cleanup ##### -->
<para>
Private: erase lists of arguments returned from gtk_args_collect().
</para>

@arg_list: arg_list_p returned from gtk_args_collect().
@info_list: info_list_p returned from gtk_args_collect().

<!-- ##### FUNCTION gtk_args_query ##### -->
<para>
Private: from a class type and its arginfo hashtable,
get an array of #GtkArgs that this object accepts.
</para>

@class_type: the class type.
@arg_info_hash_table: the hashtable of #GtkArgInfos.
@arg_flags: returned array of argument flags.
@n_args_p: the number of arguments this object accepts.
@Returns: the array of arguments (or NULL on error).

<!-- ##### MACRO gtk_binding_entry_add ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_binding_entry_clear ##### -->
<para>

</para>

@binding_set: 
@keyval: 
@modifiers: 

<!-- ##### FUNCTION gtk_binding_parse_binding ##### -->
<para>

</para>

@scanner: 
@Returns: 

<!-- ##### FUNCTION gtk_button_box_child_requisition ##### -->
<para>
This is an internally used function and should never be called from an
application.
</para>

@widget: 
@nvis_children: 
@width: 
@height: 

<!-- ##### FUNCTION gtk_button_box_get_child_ipadding_default ##### -->
<para>
The internal padding of a button is the amount of space between the outside
of the button and the widget it contains. This function gets the default
amount of horizontal and vertical padding, placing the results in @ipad_x
and @ipad_y, respectively.
</para>

@ipad_x: the default horizontal internal button padding.
@ipad_y: the default vertical internal button padding.

<!-- ##### FUNCTION gtk_button_box_get_child_size_default ##### -->
<para>
Retrieves the default minimum width and height for all button boxes, and
places the values in @min_width and @min_height, respectively.
</para>

@min_width: the default minimum width of a child widget.
@min_height: the default minimum height of a child widget.

<!-- ##### FUNCTION gtk_button_box_set_child_ipadding_default ##### -->
<para>
Sets the default number of pixels that pad each button in every button box.
</para>

@ipad_x: new default horizontal padding.
@ipad_y: new default vertical padding.

<!-- ##### FUNCTION gtk_button_box_set_child_size_default ##### -->
<para>
Sets the default size of child buttons.
</para>

@min_width: minimum default width for child buttons.
@min_height: minimum default height for child buttons.

<!-- ##### FUNCTION gtk_button_new_accel ##### -->
<para>

</para>

@uline_label: 
@accel_group: 
@Returns: 

<!-- ##### FUNCTION gtk_button_new_stock ##### -->
<para>

</para>

@stock_id: 
@accel_group: 
@Returns: 

<!-- ##### FUNCTION gtk_calendar_display_options ##### -->
<para>
</para>

@calendar: 
@flags: 

<!-- ##### FUNCTION gtk_calendar_freeze ##### -->
<para>
</para>

@calendar: 

<!-- ##### FUNCTION gtk_calendar_thaw ##### -->
<para>
</para>

@calendar: 

<!-- ##### FUNCTION gtk_cell_renderer_event ##### -->
<para>

</para>

@cell: 
@event: 
@widget: 
@path: 
@background_area: 
@cell_area: 
@flags: 
@Returns: 

<!-- ##### FUNCTION gtk_cell_renderer_text_pixbuf_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_cell_view_get_cell_renderers ##### -->
<para>

</para>

@cell_view: 
@Returns: 

<!-- ##### FUNCTION gtk_cell_view_get_use_fg ##### -->
<para>

</para>

@cell_view: 
@Returns: 

<!-- ##### FUNCTION gtk_cell_view_set_cell_data ##### -->
<para>

</para>

@cell_view: 
@cellview: 

<!-- ##### FUNCTION gtk_cell_view_set_use_fg ##### -->
<para>

</para>

@cell_view: 
@use_fg: 

<!-- ##### FUNCTION gtk_clist_append ##### -->
<para>
Adds a row to the CList at the bottom.
</para>

@clist: The #GtkCList to affect.
@text: An array of strings to add.
@Returns: The number of the row added.

<!-- ##### FUNCTION gtk_clist_clear ##### -->
<para>
Removes all the CList's rows.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_column_title_active ##### -->
<para>
Sets the specified column in the #GtkCList to become selectable.  You can
then respond to events from the user clicking on a title button, and take
appropriate action.
</para>

@clist: The #GtkCList to affect.
@column: The column to make active, counting from 0.

<!-- ##### FUNCTION gtk_clist_column_title_passive ##### -->
<para>
Causes the specified column title button to become passive, i.e., does
not respond to events, such as the user clicking on it.
</para>

@clist: The #GtkCList to affect.
@column: The column to make passive, counting from 0.

<!-- ##### FUNCTION gtk_clist_column_titles_active ##### -->
<para>
Causes all column title buttons to become active.  This is the same
as calling gtk_clist_column_title_active() for each column.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_column_titles_hide ##### -->
<para>
Causes the #GtkCList to hide its column titles, if they are currently
showing.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_column_titles_passive ##### -->
<para>
Causes all column title buttons to become passive.  This is the same
as calling gtk_clist_column_title_passive() for each column.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_column_titles_show ##### -->
<para>
This function causes the #GtkCList to show its column titles, if
they are not already showing.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_columns_autosize ##### -->
<para>
Auto-sizes all columns in the CList and returns the total width of the CList.
</para>

@clist: The #GtkCList to affect.
@Returns: The total width of the CList.

<!-- ##### FUNCTION gtk_clist_construct ##### -->
<para>
Initializes a previously allocated #GtkCList widget for use.  This should not
normally be used to create a #GtkCList widget.  Use gtk_clist_new() instead.
</para>

@clist: A pointer to an uninitialized #GtkCList widget.
@columns: The number of columns the #GtkCList should have.
@titles: An array of strings that should be used as the titles i
of the columns.  There should be enough strings in the array for
the number of columns specified.

<!-- ##### FUNCTION gtk_clist_find_row_from_data ##### -->
<para>
Searches the CList for the row with the specified data.
</para>

@clist: The #GtkCList to search.
@data: The data to search for a match.
@Returns: The number of the matching row, or -1 if no match could be found.

<!-- ##### FUNCTION gtk_clist_freeze ##### -->
<para>
Causes the #GtkCList to stop updating its visuals until a matching call to
gtk_clist_thaw() is made.  This function is useful if a lot of changes
will be made to the widget that may cause a lot of visual updating to
occur.  Note that calls to gtk_clist_freeze() can be nested.  
</para>

@clist: The #GtkCList to freeze.

<!-- ##### FUNCTION gtk_clist_get_cell_style ##### -->
<para>
Gets the current style of the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@Returns: A #GtkStyle object.

<!-- ##### FUNCTION gtk_clist_get_cell_type ##### -->
<para>
Checks the type of cell at the location specified.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@Returns: A #GtkCellType value describing the cell.

<!-- ##### FUNCTION gtk_clist_get_column_title ##### -->
<para>
Gets the current title of the specified column
</para>

@clist: The #GtkCList to affect.
@column: The column to query.
@Returns: The title of the column.

<!-- ##### FUNCTION gtk_clist_get_column_widget ##### -->
<para>
Gets the widget in the column header for the specified column.
</para>

@clist: The #GtkCList to affect.
@column: The column to query.
@Returns: Pointer to a #GtkWidget for the column header.

<!-- ##### FUNCTION gtk_clist_get_hadjustment ##### -->
<para>
Gets the #GtkAdjustment currently being used for the horizontal
aspect.
</para>

@clist: The #GtkCList to check.
@Returns: A #GtkAdjustment object, or NULL if none is currently
being used.

<!-- ##### FUNCTION gtk_clist_get_pixmap ##### -->
<para>
Gets the pixmap and bitmap mask of the specified cell.  The returned mask value can be NULL.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@pixmap: A pointer to a pointer to store the cell's #GdkPixmap.
@mask: A pointer to a pointer to store the cell's #GdkBitmap mask.
@Returns: 1 if the cell's pixmap could be retrieved, 0 otherwise.

<!-- ##### FUNCTION gtk_clist_get_pixtext ##### -->
<para>
Gets the text, pixmap and bitmap mask for the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@column: The column to query.
@text: A pointer to a pointer to store the text.
@spacing: A pointer to a #guint8 to store the spacing.
@pixmap: A pointer to a #GdkPixmap pointer to store the cell's pixmap.
@mask: A pointer to a #GdkBitmap pointer to store the cell's bitmap mask.
@Returns: 1 if the retrieval was successful, 0 otherwise.

<!-- ##### FUNCTION gtk_clist_get_row_data ##### -->
<para>
Gets the currently set data for the specified row.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@Returns: The data set for the row.

<!-- ##### FUNCTION gtk_clist_get_row_style ##### -->
<para>
Gets the style set for the specified row.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@Returns: The #GtkStyle of the row.

<!-- ##### FUNCTION gtk_clist_get_selectable ##### -->
<para>
Gets whether the specified row is selectable or not.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@Returns: A #gboolean value.

<!-- ##### FUNCTION gtk_clist_get_selection_info ##### -->
<para>
Gets the row and column at the specified pixel position in the CList.
</para>

@clist: The #GtkCList to affect.
@x: The horizontal pixel position to check.
@y: The vertical pixel position to check..
@row: Pointer to a #gint to store the row value.
@column: Pointer to a #gint to store the column value.
@Returns: 1 if row/column is returned and in range, 0 otherwise.

<!-- ##### FUNCTION gtk_clist_get_text ##### -->
<para>
Gets the text for the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@column: The column to query.
@text: A pointer to a pointer to store the text.
@Returns: 1 if the cell's text could be retrieved, 0 otherwise.

<!-- ##### FUNCTION gtk_clist_get_vadjustment ##### -->
<para>
Gets the #GtkAdjustment currently being used for the vertical
aspect.
</para>

@clist: The #GtkCList to check.
@Returns: A #GtkAdjustment object, or NULL if none is currently
being used.

<!-- ##### FUNCTION gtk_clist_insert ##### -->
<para>
Adds a row of text to the CList at the specified position.
</para>

@clist: The #GtkCList to affect.
@row: The row where the text should be inserted.
@text: An array of string to add.
@Returns: The number of the row added.

<!-- ##### FUNCTION gtk_clist_moveto ##### -->
<para>
Tells the CList widget to visually move to the specified 
row and column.
</para>

@clist: The #GtkCList to affect.
@row: The row to which to move.
@column: The column to which to move.
@row_align: A value between 0 and 1 that describes the positioning of 
the row in relation to the viewable area of the CList's contents.
@col_align: A value between 0 and 1 that describes the positioning of 
the column in relation to the viewable area of the CList's contents.

<!-- ##### FUNCTION gtk_clist_new ##### -->
<para>
Creates a new #GtkCList widget for use.
</para>

@columns: The number of columns the #GtkCList should have.
@Returns: A pointer to a new GtkCList object.

<!-- ##### FUNCTION gtk_clist_new_with_titles ##### -->
<para>
Creates a new #GtkCList widget with column titles for use.
</para>

@columns: The number of columns the #GtkCList should have.
@titles: A string array of titles for the widget.  There should be
enough strings in the array for the specified number of columns.
@Returns: A pointer to a new GtkCList object.

<!-- ##### FUNCTION gtk_clist_optimal_column_width ##### -->
<para>
Gets the required width in pixels that is needed to show
everything in the specified column.
</para>

@clist: The #GtkCList to check.
@column: The column to check.
@Returns: The required width in pixels for the column.

<!-- ##### FUNCTION gtk_clist_prepend ##### -->
<para>
Adds a row to the CList at the top.
</para>

@clist: The #GtkCList to affect.
@text: An array of strings to add.
@Returns: The number of the row added.

<!-- ##### FUNCTION gtk_clist_remove ##### -->
<para>
Removes the specified row from the CList.
</para>

@clist: The #GtkCList to affect.
@row: The row to remove.

<!-- ##### FUNCTION gtk_clist_row_is_visible ##### -->
<para>
Checks how the specified row is visible.
</para>

@clist: The #GtkCList to affect.
@row: The row to query.
@Returns: A #GtkVisibility value that tells you how the row is visible.

<!-- ##### FUNCTION gtk_clist_row_move ##### -->
<para>
Allows you to move a row from one position to another in the
list.
</para>

@clist: The #GtkCList to affect.
@source_row: The original position of the row to move.
@dest_row: The position to which the row should be moved.

<!-- ##### FUNCTION gtk_clist_select_all ##### -->
<para>
Selects all rows in the CList.  This function has no affect for a
CList in "single" or "browse" selection mode.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_select_row ##### -->
<para>
Selects the specified row.  Causes the "select-row" signal to be emitted for the specified row and column.
</para>

@clist: The #GtkCList to affect.
@row: The row to select.
@column: The column to select.

<!-- ##### FUNCTION gtk_clist_set_auto_sort ##### -->
<para>
Turns on or off auto sort of the #GtkCList. If auto sort is on, then the CList will be resorted when a row is inserted into the CList.
</para>

@clist: The #GtkCList to affect.
@auto_sort: whether auto sort should be on or off

<!-- ##### FUNCTION gtk_clist_set_background ##### -->
<para>
Sets the background color for the specified row.
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@color: A pointer to a #GdkColor structure.

<!-- ##### FUNCTION gtk_clist_set_button_actions ##### -->
<para>
Sets the action(s) that the specified mouse button will have
on the CList.
</para>

@clist: The #GtkCList to affect.
@button: The mouse button to set. The values here, unlike in the
         rest of GTK+ start from 0. For instance, the right mouse
         button, which is 3 elsewhere, should be given as 2 here.
@button_actions: A logically OR'd value of #GtkButtonAction values 
for the button.

<!-- ##### FUNCTION gtk_clist_set_cell_style ##### -->
<para>
Sets the style for the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@style: A pointer to a #GtkStyle structure.

<!-- ##### FUNCTION gtk_clist_set_column_auto_resize ##### -->
<para>
Lets you specify whether a column should be automatically resized
by the widget when data is added or removed.  Enabling auto-resize
on a column explicity disallows user-resizing of the column.
</para>

@clist: The #GtkCList to affect.
@column: The column on which to set auto-resizing.
@auto_resize: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_column_justification ##### -->
<para>
Sets the justification to be used for all text in the specified
column.
</para>

@clist: The #GtkCList to affect.
@column: The column which should be affected.
@justification: A GtkJustification value for the column.

<!-- ##### FUNCTION gtk_clist_set_column_max_width ##### -->
<para>
Causes the column specified to have a maximum width, preventing
the user from resizing it larger than that specified.
</para>

@clist: The #GtkCList to affect.
@column: The column to set the maximum width.
@max_width: The width, in pixels.

<!-- ##### FUNCTION gtk_clist_set_column_min_width ##### -->
<para>
Causes the column specified to have a minimum width, preventing
the user from resizing it smaller than that specified.
</para>

@clist: The #GtkCList to affect.
@column: The column to set the minimum width.
@min_width: The width, in pixels.

<!-- ##### FUNCTION gtk_clist_set_column_resizeable ##### -->
<para>
Lets you specify whether a specified column should be resizeable
by the user.  Note that turning on resizeability for the column will
automatically shut off auto-resizing, but turning off resizeability
will NOT turn on auto-resizing.  This must be done manually via a
call to gtk_clist_set_column_auto_resize().
</para>

@clist: The #GtkCList to affect.
@column: The column on which to set resizeability.
@resizeable: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_column_title ##### -->
<para>
Sets the title for the specified column.
</para>

@clist: The #GtkCList to affect.
@column: The column whose title should be changed.
@title: A string to be the column's title.

<!-- ##### FUNCTION gtk_clist_set_column_visibility ##### -->
<para>
Allows you to set whether a specified column in the #GtkCList should
be hidden or shown.  Note that at least one column must always be
showing, so attempting to hide the last visible column will be
ignored.
</para>

@clist: The #GtkCList to affect.
@column: The column to set visibility.
@visible: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_column_widget ##### -->
<para>
Sets a widget to be used as the specified column's title.  This
can be used to place a pixmap or something else as the column
title, instead of the standard text.
</para>

@clist: The #GtkCList to affect.
@column: The column whose title should be a widget.
@widget: A pointer to a previously create widget.

<!-- ##### FUNCTION gtk_clist_set_column_width ##### -->
<para>
Causes the column specified for the #GtkCList to be set to
a specified width.
</para>

@clist: The #GtkCList to affect.
@column: The column to set the width.
@width: The width, in pixels.

<!-- ##### FUNCTION gtk_clist_set_compare_func ##### -->
<para>
Sets the compare function of the #GtkClist to @cmp_func. If @cmp_func is NULL,
then the default compare function is used. The default compare function sorts
ascending or with the type set by gtk_clist_set_sort_type() by the column set
by gtk_clist_set_sort_column().
</para>

@clist: The #GtkCList to affect.
@cmp_func: The #GtkCompareFunction to use.

<!-- ##### FUNCTION gtk_clist_set_foreground ##### -->
<para>
Sets the foreground color for the specified row.
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@color: A pointer to a #GdkColor structure.

<!-- ##### FUNCTION gtk_clist_set_hadjustment ##### -->
<para>
Allows you to set the #GtkAdjustment to be used for the horizontal
aspect of the #GtkCList widget.
</para>

@clist: The #GtkCList to affect.
@adjustment: A pointer to a #GtkAdjustment widget, or NULL.

<!-- ##### FUNCTION gtk_clist_set_pixmap ##### -->
<para>
Sets a pixmap for the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@pixmap: A pointer to a #GdkPixmap to place in the cell.
@mask: A pointer to a #GdkBitmap mask for the cell.

<!-- ##### FUNCTION gtk_clist_set_pixtext ##### -->
<para>
Sets text and a pixmap/bitmap on the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@text: The text to set in the cell.
@spacing: The spacing between the cell's text and pixmap.
@pixmap: A pointer to a #GdkPixmap for the cell.
@mask: A pointer to a #GdkBitmap mask for the cell.

<!-- ##### FUNCTION gtk_clist_set_reorderable ##### -->
<para>
Sets whether the CList's rows are re-orderable using drag-and-drop.
</para>

@clist: The #GtkCList to affect.
@reorderable: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_row_data ##### -->
<para>
Sets data for the specified row.  This is the same as calling gtk_clist_set_row_data_full(clist, row, data, NULL).
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@data: The data to set for the row.

<!-- ##### FUNCTION gtk_clist_set_row_data_full ##### -->
<para>
Sets the data for specified row, with a callback when the row is destroyed.
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@data: The data to set for the row.
@destroy: A #GtkDestroyNotify function to be called when the row is destroyed.

<!-- ##### FUNCTION gtk_clist_set_row_height ##### -->
<para>
Causes the #GtkCList to have a specified height for its 
rows.  Setting the row height to 0 allows the #GtkCList to adjust
automatically to data in the row.
</para>

@clist: The #GtkCList to affect.
@height: The height, in pixels.

<!-- ##### FUNCTION gtk_clist_set_row_style ##### -->
<para>
Sets the style for all cells in the specified row.
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@style: A pointer to a #GtkStyle to set.

<!-- ##### FUNCTION gtk_clist_set_selectable ##### -->
<para>
Sets whether the specified row is selectable or not.
</para>

@clist: The #GtkCList to affect.
@row: The row to affect.
@selectable: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_selection_mode ##### -->
<para>
Sets the selection mode for the specified CList.  This allows you to
set whether only one or more than one item can be selected at a time
in the widget.  Note that setting the widget's selection mode to one
of GTK_SELECTION_BROWSE or GTK_SELECTION_SINGLE will cause all the
items in the #GtkCList to become deselected.
</para>

@clist: The #GtkCList to affect.
@mode: The GtkSelectionMode type to set for this CList.

<!-- ##### FUNCTION gtk_clist_set_shadow_type ##### -->
<para>
Sets the shadow type for the specified CList.  Changing this value
will cause the #GtkCList to update its visuals.
</para>

@clist: The #GtkCList to affect.
@type: The GtkShadowType desired.

<!-- ##### FUNCTION gtk_clist_set_shift ##### -->
<para>
Sets the vertical and horizontal shift of the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@vertical: The value to set for the vertical shift.
@horizontal: The value to set for the vertical shift.

<!-- ##### FUNCTION gtk_clist_set_sort_column ##### -->
<para>
Sets the sort column of the clist. The sort column is used by the
default compare function to determine which column to sort by. 
</para>

@clist: The #GtkCList to affect.
@column: The column to sort by

<!-- ##### FUNCTION gtk_clist_set_sort_type ##### -->
<para>
Sets the sort type of the #GtkClist. This is either GTK_SORT_ASCENDING for
ascening sort or GTK_SORT_DESCENDING for descending sort.
</para>

@clist: The #GtkCList to affect.
@sort_type: the #GtkSortType to use

<!-- ##### FUNCTION gtk_clist_set_text ##### -->
<para>
Sets the displayed text in the specified cell.
</para>

@clist: The #GtkCList to affect.
@row: The row of the cell.
@column: The column of the cell.
@text: The text to set in the cell.

<!-- ##### FUNCTION gtk_clist_set_use_drag_icons ##### -->
<para>
Determines whether the #GtkClist should use icons when
doing drag-and-drop operations.
</para>

@clist: The #GtkCList to affect.
@use_icons: %TRUE or %FALSE.

<!-- ##### FUNCTION gtk_clist_set_vadjustment ##### -->
<para>
Allows you to set the #GtkAdjustment to be used for the vertical
aspect of the #GtkCList widget.
</para>

@clist: The #GtkCList to affect.
@adjustment: A pointer to a #GtkAdjustment widget, or NULL.

<!-- ##### FUNCTION gtk_clist_sort ##### -->
<para>
Sorts the #GtkClist according to the current compare function, which
can be set with the gtk_clist_set_compare_func() function.
</para>

@clist: The #GtkCList to sort.

<!-- ##### FUNCTION gtk_clist_swap_rows ##### -->
<para>
Swaps the two specified rows with each other.
</para>

@clist: The #GtkCList to affect.
@row1: Number of the first row.
@row2: Number of the second row.

<!-- ##### FUNCTION gtk_clist_thaw ##### -->
<para>
Causes the specified #GtkCList to allow visual updates.
</para>

@clist: The #GtkCList to thaw.

<!-- ##### FUNCTION gtk_clist_undo_selection ##### -->
<para>
Undoes the last selection for an "extended selection mode" CList.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_unselect_all ##### -->
<para>
Unselects all rows in the CList.
</para>

@clist: The #GtkCList to affect.

<!-- ##### FUNCTION gtk_clist_unselect_row ##### -->
<para>
Unselects the specified row.  Causes the "unselect-row" signal to be emitted for the specified row and column.
</para>

@clist: The #GtkCList to affect.
@row: The row to select.
@column: The column to select.

<!-- ##### FUNCTION gtk_color_selection_get_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_get_old_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_get_use_opacity ##### -->
<para>

</para>

@colorsel: 
@Returns: 

<!-- ##### FUNCTION gtk_color_selection_get_use_palette ##### -->
<para>

</para>

@colorsel: 
@Returns: 

<!-- ##### FUNCTION gtk_color_selection_set_change_palette_hook ##### -->
<para>

</para>

@func: 
@Returns: 

<!-- ##### FUNCTION gtk_color_selection_set_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_set_old_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_set_opacity ##### -->
<para>
Controls whether opacity can be set with the #GtkColorSelection.
If this functionality is enabled, the necessary additional widgets
are added to the #GtkColorSelection and the opacity value can be
retrieved via the fourth value in the color array returned by
the gtk_color_selection_get_color() function.
</para>

@colorsel: a #GtkColorSelection.
@use_opacity: a boolean indicating whether the opacity selection
is enabled.

<!-- ##### FUNCTION gtk_color_selection_set_use_opacity ##### -->
<para>

</para>

@colorsel: 
@use_opacity: 

<!-- ##### FUNCTION gtk_color_selection_set_use_palette ##### -->
<para>

</para>

@colorsel: 
@use_palette: 

<!-- ##### FUNCTION gtk_combo_box_get_row_separator_column ##### -->
<para>

</para>

@combo_box: 
@Returns: 

<!-- ##### FUNCTION gtk_combo_box_set_row_separator_column ##### -->
<para>

</para>

@combo_box: 
@column: 

<!-- ##### FUNCTION gtk_combo_disable_activate ##### -->
<para>
Stops the #GtkCombo widget from showing the popup list when the #GtkEntry
emits the "activate" signal, i.e. when the Return key is pressed.
This may be useful if, for example, you want the Return key to close a dialog
instead.
</para>

@combo: a #GtkCombo.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_new ##### -->
<para>
Creates a new #GtkCombo.
</para>

@Returns: a new #GtkCombo.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_case_sensitive ##### -->
<para>
Specifies whether the text entered into the #GtkEntry field and the text in
the list items is case sensitive.
</para>
<para>
This may be useful, for example, when you have called
gtk_combo_set_value_in_list() to limit the values entered, but you are not
worried about differences in case.
</para>

@combo: a #GtkCombo.
@val: %TRUE if the text in the list items is case sensitive.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_item_string ##### -->
<para>
Sets the string to place in the #GtkEntry field when a particular list item is
selected. This is needed if the list item is not a simple label.
</para>

@combo: a #GtkCombo.
@item: a #GtkItem.
@item_value: the string to place in the #GtkEntry when @item is selected.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_popdown_strings ##### -->
<para>
Convenience function to set all of the items in the popup list.
(See the <link linkend="gtkcombo-simple-example">example</link> above.)
</para>

@combo: a #GtkCombo.
@strings: a list of strings, or %NULL to clear the popup list
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_use_arrows ##### -->
<para>
Specifies if the arrow (cursor) keys can be used to step through the items in
the list. This is on by default.
</para>

@combo: a #GtkCombo.
@val: %TRUE if the arrow keys can be used to step through the items in 
     the list.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_use_arrows_always ##### -->
<para>
Obsolete function, does nothing.
</para>

@combo: a #GtkCombo.
@val: unused
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_combo_set_value_in_list ##### -->
<para>
Specifies whether the value entered in the text entry field must match one of
the values in the list. If this is set then the user will not be able to
perform any other action until a valid value has been entered.
</para>
<para>
If an empty field is acceptable, the @ok_if_empty parameter should be %TRUE.
</para>

@combo: a #GtkCombo.
@val: %TRUE if the value entered must match one of the values in the list.
@ok_if_empty: %TRUE if an empty value is considered valid.
@Deprecated: 2.4: Use #GtkComboBox instead.

<!-- ##### FUNCTION gtk_container_add_child_arg_type ##### -->
<para>

</para>

@arg_name: 
@arg_type: 
@arg_flags: 
@arg_id: 

<!-- ##### FUNCTION gtk_container_add_with_args ##### -->
<para>

</para>

@container: 
@widget: 
@first_arg_name: 
@Varargs: 

<!-- ##### FUNCTION gtk_container_addv ##### -->
<para>

</para>

@container: 
@widget: 
@n_args: 
@args: 

<!-- ##### FUNCTION gtk_container_arg_get ##### -->
<para>

</para>

@container: 
@child: 
@arg: 
@info: 

<!-- ##### FUNCTION gtk_container_arg_set ##### -->
<para>

</para>

@container: 
@child: 
@arg: 
@info: 

<!-- ##### FUNCTION gtk_container_child_arg_get_info ##### -->
<para>

</para>

@object_type: 
@arg_name: 
@info_p: 
@Returns: 

<!-- ##### FUNCTION gtk_container_child_args_collect ##### -->
<para>

</para>

@object_type: 
@arg_list_p: 
@info_list_p: 
@first_arg_name: 
@args: 
@Returns: 

<!-- ##### FUNCTION gtk_container_child_getv ##### -->
<para>

</para>

@container: 
@child: 
@n_args: 
@args: 

<!-- ##### FUNCTION gtk_container_child_setv ##### -->
<para>

</para>

@container: 
@child: 
@n_args: 
@args: 

<!-- ##### FUNCTION gtk_container_dequeue_resize_handler ##### -->
<para>

</para>

@container: 

<!-- ##### FUNCTION gtk_container_focus ##### -->
<para>

</para>

@container: 
@direction: 
@Returns: 

<!-- ##### FUNCTION gtk_container_query_child_args ##### -->
<para>

</para>

@class_type: 
@arg_flags: 
@nargs: 
@Returns: 

<!-- ##### FUNCTION gtk_decorated_window_calculate_frame_size ##### -->
<para>

</para>

@window: 

<!-- ##### FUNCTION gtk_decorated_window_init ##### -->
<para>

</para>

@window: 

<!-- ##### FUNCTION gtk_decorated_window_move_resize_window ##### -->
<para>

</para>

@window: 
@x: 
@y: 
@width: 
@height: 

<!-- ##### FUNCTION gtk_decorated_window_set_title ##### -->
<para>

</para>

@window: 
@title: 

<!-- ##### FUNCTION gtk_drag_dest_handle_event ##### -->
<para>
Internal function.
</para>

@toplevel: 
@event: 

<!-- ##### FUNCTION gtk_drag_set_default_icon ##### -->
<para>

</para>

@colormap: 
@pixmap: 
@mask: 
@hot_x: 
@hot_y: 

<!-- ##### FUNCTION gtk_drag_source_handle_event ##### -->
<para>
Internal function.
</para>

@widget: 
@event: 

<!-- ##### FUNCTION gtk_drawing_area_size ##### -->
<para>
Sets the size that the drawing area will request
in response to a "size_request" signal. The 
drawing area may actually be allocated a size
larger than this depending on how it is packed
within the enclosing containers.
</para>

@darea: a #GtkDrawingArea
@width: the width to request
@height: the height to request
@Deprecated: Use gtk_widget_set_size_request() instead.

<!-- ##### FUNCTION gtk_editable_changed ##### -->
<para>
Causes the "changed" signal to be emitted.
</para>

@editable: a #GtkEditable widget.

<!-- ##### FUNCTION gtk_editable_claim_selection ##### -->
<para>
Claim or disclaim ownership of the PRIMARY X selection.
</para>

@editable: a #GtkEditable widget.
@claim: if %TRUE, claim the selection, otherwise, disclaim it.
@time: the timestamp for claiming the selection.

<!-- ##### FUNCTION gtk_entry_get_gicon ##### -->
<para>

</para>

@entry: 
@icon_pos: 
@Returns: 

<!-- ##### FUNCTION gtk_entry_get_pixbuf ##### -->
<para>

</para>

@entry: 
@icon_pos: 
@Returns: 

<!-- ##### FUNCTION gtk_entry_get_stock ##### -->
<para>

</para>

@entry: 
@icon_pos: 
@Returns: 

<!-- ##### FUNCTION gtk_entry_get_storage_type ##### -->
<para>

</para>

@entry: 
@icon_pos: 
@Returns: 

<!-- ##### FUNCTION gtk_file_chooser_dialog_new_with_backend ##### -->
<para>

</para>

@title: 
@parent: 
@action: 
@backend: 
@first_button_text: 
@Varargs: 
@Returns: 


<!--
Local variables:
mode: sgml
sgml-parent-document: ("../gtk-docs.sgml" "book" "refsect1")
End:
-->

<!-- ##### FUNCTION gtk_file_chooser_error_quark ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_file_chooser_get_folder_mode ##### -->
<para>

</para>

@chooser: 
@Returns: 

<!-- ##### FUNCTION gtk_file_chooser_set_folder_mode ##### -->
<para>

</para>

@chooser: 
@folder_mode: 

<!-- ##### FUNCTION gtk_file_chooser_widget_new_with_backend ##### -->
<para>

</para>

@action: 
@backend: 
@Returns: 

<!-- ##### FUNCTION gtk_file_selection_complete ##### -->
<para>
Will attempt to match @pattern to a valid filenames or subdirectories in the current directory. If a match can be made, the matched filename will appear in the text entry field of the file selection dialog.
If a partial match can be made, the "Files" list will contain those
file names which have been partially matched, and the "Folders"
list those directories which have been partially matched.
</para>

@filesel: a #GtkFileSelection.
@pattern: a string of characters which may or may not match any filenames in the current directory.

<!-- ##### FUNCTION gtk_file_selection_get_filename ##### -->
<para>
</para>

@filesel: 
@Returns: 

<!-- ##### FUNCTION gtk_file_selection_get_select_multiple ##### -->
<para>

</para>

@filesel: 
@Returns: 

<!-- ##### FUNCTION gtk_file_selection_get_selections ##### -->
<para>

</para>

@filesel: 
@Returns: 

<!-- ##### FUNCTION gtk_file_selection_hide_fileop_buttons ##### -->
<para>
Hides the file operation buttons that normally appear at the top of the dialog. Useful if you wish to create a custom file selector, based on #GtkFileSelection.
</para>

@filesel: a #GtkFileSelection.

<!-- ##### FUNCTION gtk_file_selection_new ##### -->
<para>
Creates a new file selection dialog box. By default it will contain a #GtkTreeView of the application's current working directory, and a file listing. Operation buttons that allow the user to create a directory, delete files and rename files, are also present.
</para>

@title: a message that will be placed in the file requestor's titlebar.
@Returns: the new file selection.
@Deprecated: Use gtk_file_chooser_dialog_new() instead

<!-- ##### FUNCTION gtk_file_selection_set_filename ##### -->
<para>
</para>

@filesel: 
@filename: 

<!-- ##### FUNCTION gtk_file_selection_set_select_multiple ##### -->
<para>

</para>

@filesel: 
@select_multiple: 

<!-- ##### FUNCTION gtk_file_selection_show_fileop_buttons ##### -->
<para>
Shows the file operation buttons, if they have previously been hidden. The rest of the widgets in the dialog will be resized accordingly.
</para>

@filesel: a #GtkFileSelection.

<!-- ##### FUNCTION gtk_font_selection_dialog_get_apply_button ##### -->
<para>

</para>

@fsd: 
@Returns: 

<!-- ##### FUNCTION gtk_font_selection_dialog_get_font ##### -->
<para>

</para>

@fsd: 
@Returns: 

<!-- ##### FUNCTION gtk_font_selection_dialog_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fsd: a #GtkFontSelectionDialog.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_font_selection_get_face_entry ##### -->
<para>

</para>

@fontsel: 
@Returns: 

<!-- ##### FUNCTION gtk_font_selection_get_family_entry ##### -->
<para>

</para>

@fontsel: 
@Returns: 

<!-- ##### FUNCTION gtk_font_selection_get_font ##### -->
<para>

</para>

@fontsel: 
@Returns: 

<!-- ##### FUNCTION gtk_font_selection_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fontsel: a #GtkFontSelection.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_icon_view_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_identifier_get_type ##### -->
<para>
Get the type of GtkIdentifier.
</para>

@Returns: GtkType -- the enumerated type of something.

<!-- ##### FUNCTION gtk_image_menu_item_add_image ##### -->
<para>

</para>

@image_menu_item: 
@child: 

<!-- ##### FUNCTION gtk_image_menu_item_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_item_factories_path_delete ##### -->
<para>

</para>

@ifactory_path: 
@path: 

<!-- ##### FUNCTION gtk_item_factory_add_foreign ##### -->
<para>

</para>

@accel_widget: 
@full_path: 
@accel_group: 
@keyval: 
@modifiers: 

<!-- ##### FUNCTION gtk_item_factory_construct ##### -->
<para>

</para>

@ifactory: 
@container_type: 
@path: 
@accel_group: 

<!-- ##### FUNCTION gtk_item_factory_create_item ##### -->
<para>

</para>

@ifactory: 
@entry: 
@callback_data: 
@callback_type: 

<!-- ##### FUNCTION gtk_item_factory_create_items ##### -->
<para>

</para>

@ifactory: 
@n_entries: 
@entries: 
@callback_data: 

<!-- ##### FUNCTION gtk_item_factory_create_items_ac ##### -->
<para>

</para>

@ifactory: 
@n_entries: 
@entries: 
@callback_data: 
@callback_type: 

<!-- ##### FUNCTION gtk_item_factory_create_menu_entries ##### -->
<para>

</para>

@n_entries: 
@entries: 

<!-- ##### FUNCTION gtk_item_factory_delete_entries ##### -->
<para>

</para>

@ifactory: 
@n_entries: 
@entries: 

<!-- ##### FUNCTION gtk_item_factory_delete_entry ##### -->
<para>

</para>

@ifactory: 
@entry: 

<!-- ##### FUNCTION gtk_item_factory_delete_item ##### -->
<para>

</para>

@ifactory: 
@path: 

<!-- ##### FUNCTION gtk_item_factory_dump_items ##### -->
<para>

</para>

@path_pspec: 
@modified_only: 
@print_func: 
@func_data: 

<!-- ##### FUNCTION gtk_item_factory_dump_rc ##### -->
<para>

</para>

@file_name: 
@path_pspec: 
@modified_only: 

<!-- ##### FUNCTION gtk_item_factory_from_path ##### -->
<para>

</para>

@path: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_from_widget ##### -->
<para>

</para>

@widget: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_get_item ##### -->
<para>

</para>

@ifactory: 
@path: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_get_item_by_action ##### -->
<para>

</para>

@ifactory: 
@action: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_get_widget ##### -->
<para>

</para>

@ifactory: 
@path: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_get_widget_by_action ##### -->
<para>

</para>

@ifactory: 
@action: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_new ##### -->
<para>

</para>

@container_type: 
@path: 
@accel_group: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_parse_rc ##### -->
<para>

</para>

@file_name: 

<!-- ##### FUNCTION gtk_item_factory_parse_rc_scanner ##### -->
<para>

</para>

@scanner: 

<!-- ##### FUNCTION gtk_item_factory_parse_rc_string ##### -->
<para>

</para>

@rc_string: 

<!-- ##### FUNCTION gtk_item_factory_path_from_widget ##### -->
<para>

</para>

@widget: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_popup ##### -->
<para>

</para>

@ifactory: 
@x: 
@y: 
@mouse_button: 
@time_: 

<!-- ##### FUNCTION gtk_item_factory_popup_data ##### -->
<para>

</para>

@ifactory: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_popup_data_from_widget ##### -->
<para>

</para>

@widget: 
@Returns: 

<!-- ##### FUNCTION gtk_item_factory_popup_with_data ##### -->
<para>

</para>

@ifactory: 
@popup_data: 
@destroy: 
@x: 
@y: 
@mouse_button: 
@time_: 

<!-- ##### FUNCTION gtk_item_factory_print_func ##### -->
<para>

</para>

@FILE_pointer: 
@string: 

<!-- ##### FUNCTION gtk_item_factory_set_translate_func ##### -->
<para>

</para>

@ifactory: 
@func: 
@data: 
@notify: 

<!-- ##### FUNCTION gtk_label_get ##### -->
<para>
Gets the current string of text within the #GtkLabel and writes it to
the given @str argument.  It does not make a copy of this string so you
must not write to it.
</para>

@label: The #GtkLabel widget you want to get the text from.
@str: The reference to the pointer you want to point to the text.
@Deprecated: Use gtk_label_get_text() instead.

<!-- ##### MACRO gtk_label_set ##### -->
<para>
Sets the text within the GtkLabel widget.
</para>

@Deprecated: Use gtk_label_set_text() instead.

<!-- ##### FUNCTION gtk_label_set_markup_with_accel ##### -->
<para>

</para>

@label: 
@str: 
@Returns: 

<!-- ##### FUNCTION gtk_layout_freeze ##### -->
<para>

</para>

@layout: 

<!-- ##### FUNCTION gtk_layout_thaw ##### -->
<para>

</para>

@layout: 

<!-- ##### FUNCTION gtk_list_append_items ##### -->
<para>
Adds @items to the end of the @list.
</para>

@list: the list widget.
@items: the items.

<!-- ##### FUNCTION gtk_list_child_position ##### -->
<para>
Searches the children of @list for the index of @child.
</para>

@list: the list widget.
@child: the child to look for.
@Returns: the index of the child, -1 if not found.

<!-- ##### FUNCTION gtk_list_clear_items ##### -->
<para>
Removes the items between index @start (included) and @end (excluded)
from the @list. If @end is negative, or greater than the number of
children of @list, it's assumed to be exactly the number of
elements. If @start is greater than or equal to @end, nothing is
done.
</para>

@list: the list widget.
@start: the index of the first item to remove.
@end: the index of the lest item to remove plus one.

<!-- ##### FUNCTION gtk_list_end_drag_selection ##### -->
<para>
Stops the drag selection mode and ungrabs the pointer. This has no
effect if a drag selection is not active.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_end_selection ##### -->
<para>
Ends the selection. Used with gtk_list_extend_selection() and
gtk_list_start_selection(). Only in #GTK_SELECTION_EXTENDED mode.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_extend_selection ##### -->
<para>
Extends the selection by moving the anchor according to @scroll_type. Only
in #GTK_SELECTION_EXTENDED.
</para>

@list: the list widget.
@scroll_type: the direction and length.
@position: the position if @scroll_type is #GTK_SCROLL_JUMP.
@auto_start_selection: if %TRUE, gtk_list_start_selection() is automatically
carried out before extending the selection.

<!-- ##### FUNCTION gtk_list_insert_items ##### -->
<para>
Inserts @items into the @list at the position @position. The #GList items
must not be freed after.
</para>

@list: the list widget.
@items: the items.
@position: the position to insert @items, starting at 0.

<!-- ##### FUNCTION gtk_list_item_deselect ##### -->
<para>
Deselects the item, by emitting the item's "deselect" signal.
</para>

@list_item: a #GtkListItem.

<!-- ##### FUNCTION gtk_list_item_new ##### -->
<para>
Creates a new #GtkListitem.
</para>

@Returns: a new #GtkListItem.

<!-- ##### FUNCTION gtk_list_item_new_with_label ##### -->
<para>
Creates a new #GtkListItem with a child label containing the given string.
</para>

@label: the string to use for the child label.
@Returns: a new #GtkListItem with a child #GtkLabel with the text set to
@label.

<!-- ##### FUNCTION gtk_list_item_select ##### -->
<para>
Selects the item, by emitting the item's "select" signal.
Depending on the selection mode of the list, this may cause other items to
be deselected.
</para>

@list_item: a #GtkListItem.

<!-- ##### FUNCTION gtk_list_new ##### -->
<para>
Creates a new #GtkList.
</para>

@Returns: the newly-created #GtkList

<!-- ##### FUNCTION gtk_list_prepend_items ##### -->
<para>
Inserts @items at the beginning of the @list.
</para>

@list: the list widget.
@items: the items.

<!-- ##### FUNCTION gtk_list_remove_items ##### -->
<para>
Removes the @items from the @list.
</para>

@list: the list widget.
@items: the items to remove.

<!-- ##### FUNCTION gtk_list_remove_items_no_unref ##### -->
<para>
Removes the @items from the @list, without unreferencing them. It
may be useful if you want to move the items from one list to another.
</para>

@list: the list widget.
@items: the items.

<!-- ##### FUNCTION gtk_list_scroll_horizontal ##### -->
<para>
Scrolls @list horizontaly. This supposes that the list is packed into a
scrolled window or something similar, and adjustments are well
set. Step and page increment are those from the horizontal adjustment
of @list. Backward means to the left, and forward to the
right. Out of bounds values are truncated.
@scroll_type may be any valid #GtkScrollType. If @scroll_type is
#GTK_SCROLL_NONE, nothing is done. If it's #GTK_SCROLL_JUMP, the list
scrolls to the ratio @position: 0 is full left, 1 is full right.
</para>

@list: the list widget.
@scroll_type: the scrolling type.
@position: the position if @scroll_type is #GTK_SCROLL_JUMP

<!-- ##### FUNCTION gtk_list_scroll_vertical ##### -->
<para>
Scrolls @list vertically. This supposes that the list is packed into a
scrolled window or something similar, and adjustments are well
set. Step and page increment are those from the vertical adjustment
of @list. Backward means up, and forward down. Out of bounds values are
truncated.
@scroll_type may be any valid #GtkScrollType. If @scroll_type is
#GTK_SCROLL_NONE, nothing is done. If it's #GTK_SCROLL_JUMP, the list
scrolls to the ratio @position: 0 is top, 1 is bottom.
</para>

@list: the list widget.
@scroll_type: the scrolling type.
@position: the position if @scroll_type is #GTK_SCROLL_JUMP

<!-- ##### FUNCTION gtk_list_select_all ##### -->
<para>
Selects all children of @list. A signal will be emitted for each
newly selected child.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_select_child ##### -->
<para>
Selects the given @child. The signal GtkList::select-child will be
emitted.
</para>

@list: the list widget
@child: the child to select.

<!-- ##### FUNCTION gtk_list_select_item ##### -->
<para>
Selects the child number @item of the @list. Nothing happens if @item
is out of bounds. The signal GtkList::select-child will be emitted.
</para>

@list: the list widget.
@item: the index of the child to select.

<!-- ##### FUNCTION gtk_list_set_selection_mode ##### -->
<para>
Set the list selection mode. The selection mode can be any value in
#GtkSelectionMode:
<variablelist>
<varlistentry>
<term>#GTK_SELECTION_SINGLE</term>
<listitem><para>
Zero or one element may be selected.
</para></listitem>
</varlistentry>

<varlistentry>
<term>#GTK_SELECTION_BROWSE</term>
<listitem><para>
Exactly one element is always selected (this can be false after you have
changed the selection mode).
</para></listitem>
</varlistentry>

<varlistentry>
<term>#GTK_SELECTION_MULTIPLE</term>
<listitem><para>
Any number of elements may be selected. Clicks toggle the state of an
item.
</para></listitem>
</varlistentry>

<varlistentry>
<term>#GTK_SELECTION_EXTENDED</term>
<listitem><para>
Any number of elements may be selected. Click-drag selects a range of
elements; the Ctrl key may be used to enlarge the selection, and
Shift key to select between the focus and the child pointed to.
</para></listitem>
</varlistentry>
</variablelist>
</para>

@list: the list widget.
@mode: the new selection mode.

<!-- ##### FUNCTION gtk_list_start_selection ##### -->
<para>
Starts a selection (or part of selection) at the focused child. Only in
#GTK_SELECTION_EXTENDED mode.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_store_move ##### -->
<para>

</para>

@store: 
@iter: 
@position: 

<!-- ##### FUNCTION gtk_list_store_new_with_types ##### -->
<para>

</para>

@n_columns: 
@Varargs: 
@Returns: 

<!-- ##### FUNCTION gtk_list_store_set_cell ##### -->
<para>

</para>

@store: 
@iter: 
@column: 
@value: 

<!-- ##### FUNCTION gtk_list_store_set_column_type ##### -->
<para>

</para>

@store: 
@column: 
@type: 

<!-- ##### FUNCTION gtk_list_store_set_n_columns ##### -->
<para>

</para>

@store: 
@n_columns: 

<!-- ##### FUNCTION gtk_list_toggle_add_mode ##### -->
<para>
Toggles between adding to the selection and beginning a new selection. Only
in #GTK_SELECTION_EXTENDED. Useful with gtk_list_extend_selection().
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_toggle_focus_row ##### -->
<para>
Toggles the focus row. If the focus row is selected, it's
unselected. If the focus row is unselected, it's selected. If the
selection mode of @list is #GTK_SELECTION_BROWSE, this has no effect,
as the selection is always at the focus row.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_toggle_row ##### -->
<para>
Toggles the child @item of list. If the selection mode of @list is
#GTK_SELECTION_BROWSE, the item is selected, and the others are
unselected.
</para>

@list: the list widget.
@item: the child to toggle.

<!-- ##### FUNCTION gtk_list_undo_selection ##### -->
<para>
Restores the selection in the last state, only if selection mode is
#GTK_SELECTION_EXTENDED. If this function is called twice, the selection is
cleared. This function sometimes gives stranges "last states".
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_unselect_all ##### -->
<para>
Unselects all children of @list. A signal will be emitted for each
newly unselected child.
</para>

@list: the list widget.

<!-- ##### FUNCTION gtk_list_unselect_child ##### -->
<para>
Unselects the given @child. The signal GtkList::unselect-child will be
emitted.
</para>

@list: the list widget.
@child: the child to unselect.

<!-- ##### FUNCTION gtk_list_unselect_item ##### -->
<para>
Unselects the child number @item of the @list. Nothing happens if
@item is out of bounds. The signal GtkList::unselect-child will be
emitted.
</para>

@list: the list widget.
@item: the index of the child to unselect.

<!-- ##### MACRO gtk_menu_bar_append ##### -->
<para>
Adds a new #GtkMenuItem to the end of the GtkMenuBar
</para>

@menu: a #GtkMenuBar
@child: the #GtkMenuItem to add
@Deprecated: Use gtk_menu_shell_append() instead.

<!-- ##### MACRO gtk_menu_bar_insert ##### -->
<para>
Adds a new #GtkMenuItem to the GtkMenuBar at the position defined by @position
</para>

@menu: a #GtkMenuBar
@child: the #GtkMenuItem to add
@pos: the position in the item list where the @child is added.
@Deprecated: Use gtk_menu_shell_insert() instead.

<!-- ##### MACRO gtk_menu_bar_prepend ##### -->
<para>
Adds a new #GtkMenuItem to the beginning of the GtkMenuBar
</para>

@menu: a #GtkMenuBar
@child: the #GtkMenuItem to add
@Deprecated: Use gtk_menu_shell_prepend() instead.

<!-- ##### FUNCTION gtk_menu_ensure_uline_accel_group ##### -->
<para>

</para>

@menu: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_get_uline_accel_group ##### -->
<para>

</para>

@menu: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_item_configure ##### -->
<para>
Sets whether the menu item should show a submenu indicator, which is a right
arrow.
</para>

@menu_item: the menu item
@show_toggle_indicator: unused
@show_submenu_indicator: whether to show the arrow or not

<!-- ##### FUNCTION gtk_menu_item_remove_submenu ##### -->
<para>

</para>

@menu_item: 

<!-- ##### MACRO gtk_menu_item_right_justify ##### -->
<para>
Sets the menu item to be right-justified. Only useful for menu bars.
</para>

@menu_item: the menu item

<!-- ##### FUNCTION gtk_menu_item_set_placement ##### -->
<para>
Specifies the placement of the submenu around the menu item. The placement
is usually #GTK_LEFT_RIGHT for menu items in a popup menu and
#GTK_TOP_BOTTOM in menu bars.
</para>
<para>
This function is useless in usual applications.
</para>

@menu_item: the menu item
@placement: the submenu placement

<!-- ##### FUNCTION gtk_menu_tool_button_set_arrow_tooltip ##### -->
<para>

</para>

@button: 
@tooltips: 
@tip_text: 
@tip_private: 

<!-- ##### MACRO gtk_notebook_current_page ##### -->
<para>
Deprecated compatibility macro. 
</para>

@Deprecated: Use gtk_notebook_get_current_page() instead.

<!-- ##### FUNCTION gtk_notebook_get_group_id ##### -->
<para>

</para>

@notebook: 
@Returns: 

<!-- ##### FUNCTION gtk_notebook_set_group_id ##### -->
<para>

</para>

@notebook: 
@group_id: 

<!-- ##### FUNCTION gtk_notebook_set_homogeneous_tabs ##### -->
<para>
</para>

@notebook: 
@homogeneous: 

<!-- ##### MACRO gtk_notebook_set_page ##### -->
<para>
Deprecated compatibility macro. 
</para>

@Deprecated: Use gtk_notebook_set_current_page() instead.

<!-- ##### FUNCTION gtk_notebook_set_tab_border ##### -->
<para>
</para>

@notebook: 
@border_width: 

<!-- ##### FUNCTION gtk_notebook_set_tab_hborder ##### -->
<para>
</para>

@notebook: 
@tab_hborder: 

<!-- ##### FUNCTION gtk_notebook_set_tab_vborder ##### -->
<para>
</para>

@notebook: 
@tab_vborder: 

<!-- ##### FUNCTION gtk_object_add_arg_type ##### -->
<para>
Deprecated in favor of the #GObject property system including #GParamSpec.
Add a new type of argument to an object class.
Usually this is called when registering a new type of object.
</para>

@arg_name: fully qualify object name, for example GtkObject::user_data.
@arg_type: type of the argument.
@arg_flags: bitwise-OR of the #GtkArgFlags enum.  (Whether the argument is
settable or gettable, whether it is set when the object is constructed.)
@arg_id: an internal number, passed in from here to the "set_arg" and
"get_arg" handlers of the object.

<!-- ##### FUNCTION gtk_object_arg_get ##### -->
<para>
Private function to get an argument and argument info from an object.
</para>

@object: the object whose argument should be retrieved.
@arg: the argument, for the name on input, the rest is filled on output.
@info: a #GtkArgInfo structure to optionally fill in.

<!-- ##### FUNCTION gtk_object_arg_get_info ##### -->
<para>
Query information about an argument type.
</para>

@object_type: type of object to query about.
@arg_name: name of the argument.
@info_p: pointer to be filled in with a pointer to the GtkArgInfo.
@Returns: an error message, or NULL on success.
It is the caller's responsibility to call g_free() in the event of error.

<!-- ##### FUNCTION gtk_object_arg_set ##### -->
<para>
Private function to set an argument and argument info to an object.
</para>

@object: the object whose argument should be set.
@arg: the argument.
@info: infomation about this type of argument in general.

<!-- ##### FUNCTION gtk_object_args_collect ##### -->
<para>
Private: Gets an array of #GtkArgs from a va_list C structure.
</para>

@object_type: the type of object to collect arguments for.
@arg_list_p: pointer to be filled in with a list of parsed arguments.
@info_list_p: optional pointer for a returned list #GtkArgInfos.
@first_arg_name: name of first argument.
@var_args: value of first argument, followed by more key/value pairs,
terminated by NULL.
@Returns: an error message, or NULL on success.
It is the caller's responsibility to call g_free() in the event of error.

<!-- ##### FUNCTION gtk_object_class_add_signals ##### -->
<para>
Add an array of signals to a #GtkObjectClass.
Usually this is called when registering a new type of object.
</para>

@klass: the object class to append signals to.
@signals: the signals to append.
@nsignals: the number of signals being appended.

<!-- ##### FUNCTION gtk_object_class_user_signal_new ##### -->
<para>
Define a signal-handler for a new signal on an already defined
object.
</para>
<para>
See the signal documentation for more general information.
</para>

@klass: the object class to define the signal for.
@name: the name of the signal.
@signal_flags: the default emission behavior for the signal.
See g_signal_new().
@marshaller: a function that will take an array of GtkArgs
and invoke the appropriate handler with the normal calling
conventions.
@return_val: specify the return-value type for the signal
(or GTK_TYPE_NONE for no return-value).
@nparams: specify the number of parameters the signal
receives from the caller of g_signal_emit().
@Varargs: list of nparams #GtkTypes to pass to the signal handlers.
@Returns: the signal id.  (See #GtkSignals)

<!-- ##### FUNCTION gtk_object_class_user_signal_newv ##### -->
<para>
Define a signal-handler for a new signal on an already defined
object.
</para>

@klass: the object class to define the signal for.
@name: the name of the signal.
@signal_flags: the default emission behavior for the signal.
See g_signal_new().
@marshaller: takes a GtkObject, a #GtkSignalFunc, and an array
of arguments, and invokes the function using the appropriate
calling conventions.  Usually just select a function
out of gtkmarshal.h.
@return_val: specify the return-value type for the signal (possibly
#GTK_TYPE_NONE).
@nparams: specify the number of parameters the signal
receives from the caller of g_signal_emit().
@params: array of #GtkTypes the signal handlers for this signal
should have in their prototype (of length nparams).
@Returns: the signal id.  (See #GtkSignals)

<!-- ##### FUNCTION gtk_object_constructed ##### -->
<para>
Mark an allocated object as constructed.
This is used for situations
that require precise control of the construction process.
</para>
<para>
This is done when gtk_object_default_construct() is inadequate.
In #GtkCList the need arises because #GtkCList does construction work that
must happen <emphasis>after</emphasis> its derivers.  This work
cannot be done in an initializer function, so an alternate
constructor is mandatory.  It calls gtk_object_constructed() to
indicate it has done its job, so that no other constructor will
be invoked.
</para>
<para>
Normally this function is just automatically run from
gtk_object_default_construct().
</para>

@object: object which has been constructed.  This is usually
done automatically by gtk_object_new() and gtk_object_newv().

<!-- ##### MACRO gtk_object_data_force_id ##### -->
<para>
Useless deprecated macro. Ignore it. 
</para>


<!-- ##### MACRO gtk_object_data_try_key ##### -->
<para>
Useless deprecated macro. Ignore it.
</para>


<!-- ##### FUNCTION gtk_object_default_construct ##### -->
<para>
This function is called to construct arguments that haven't been initialized
but have the #GTK_ARG_CONSTRUCT flag set.
</para>
<para>
All number arguments are set to 0.  All pointers and strings
are set to NULL.
</para>
<para>
Normally invoked by gtk_object_new() automatically; gtk_type_new() can
be used to bypass it.
</para>

@object: the object to initialize.

<!-- ##### FUNCTION gtk_object_get ##### -->
<para>
Gets properties of an object. 
</para>

@object: a #GtkObject.
@first_property_name: name of first property to get the value for.
@Varargs: %NULL-terminated list of name-return location pairs.
@Deprecated: Use g_object_get() instead.

<!-- ##### FUNCTION gtk_object_get_data ##### -->
<para>
Get a named field from the object's table of associations (the object_data).
</para>

@object: the object maintaining the associations.
@key: name of the key for that association.
@Returns: the data if found, or %NULL if no such data exists.
@Deprecated: Use g_object_get_data() instead.

<!-- ##### FUNCTION gtk_object_get_data_by_id ##### -->
<para>
Just like gtk_object_get_data() except that it takes
a #GQuark instead of a string, so it is slightly faster.
</para>
<para>
Use gtk_object_data_try_key() and gtk_object_data_force_id()
to get an id from a string.
</para>

@object: object containing the associations.
@data_id: quark of the key.
@Returns: the data if found, or %NULL if no such data exists.
@Deprecated: Use g_object_get_qdata() instead.

<!-- ##### FUNCTION gtk_object_get_user_data ##### -->
<para>
Get the object's user data pointer.
</para>
<para>
This is intended to be a pointer for your convenience in
writing applications.
</para>

@object: the object.
@Returns: the user data field for object.
@Deprecated: Use g_object_get_data() instead.

<!-- ##### FUNCTION gtk_object_getv ##### -->
<para>
Gets an array of argument values from an object.
</para>

@object: the object to get arguments from.
@n_args: the number of arguments to query.
@args: the arguments to fill in.

<!-- ##### FUNCTION gtk_object_new ##### -->
<para>
Constructs an object given its arguments, enumerated in the call to the
function.
</para>

@type: the type identifying this object.  Returned by gtk_type_unique()
(although for a properly-written object it should be accessible through
a #GTK_TYPE_FOO macro.)
@first_property_name: name of the first property to set when constructing
   the object.
@Varargs: the first argument's value, followed by any number of
name/argument-value pairs, terminated with %NULL.
@Returns: the new #GtkObject.
@Deprecated: Use g_object_new() instead.

<!-- ##### FUNCTION gtk_object_newv ##### -->
<para>
Construct an object with an array of arguments.
</para>

@object_type: the type of the object to create.
@n_args: the number of arguments to set.
@args: an array of n_args arguments (which are name and value pairs).
@Returns: the new GtkObject.

<!-- ##### FUNCTION gtk_object_query_args ##### -->
<para>
Get all the arguments that may be used for a given type.
</para>
<para>
In Java, this type of mechanism is called 
<wordasword>introspection</wordasword>.  It is used by applications
like Glade, that have to determine what can be done to an object
at run-time.
</para>

@class_type: the GtkType of the ObjectClass
(returned from GTK_OBJECT_CLASS(class)-&gt;type for example).
@arg_flags: if non-NULL, obtains the #GtkArgFlags that apply to
each argument.  You must g_free() this if you request it.
@n_args: the number of arguments is returned in this field.
@Returns: an array of arguments, that you must deallocate with g_free().

<!-- ##### FUNCTION gtk_object_ref ##### -->
<para>
Increases the reference count of the object.
</para>

@object: the object to reference.
@Returns: @object.
@Deprecated: Use g_object_ref() instead.

<!-- ##### FUNCTION gtk_object_remove_data ##### -->
<para>
Removes a specified datum from the object's data associations (the object_data).
Subsequent calls to gtk_object_get_data() will return %NULL.
</para>
<para>
If you specified a destroy handler with gtk_object_set_data_full(),
it will be invoked.
</para>

@object: the object maintaining the association.
@key: name of the key for that association.
@Deprecated: Use g_object_set_data() to set the object data to %NULL instead.

<!-- ##### FUNCTION gtk_object_remove_data_by_id ##### -->
<para>
Just like gtk_object_remove_data() except that it takes
a #GQuark instead of a string, so it is slightly faster.
</para>
<para>
Remove a specified datum from the object's data associations.
Subsequent calls to gtk_object_get_data() will return %NULL.
</para>
<para>
Use gtk_object_data_try_key() and gtk_object_data_force_id()
to get an id from a string.
</para>

@object: object containing the associations.
@data_id: quark of the key.
@Deprecated: Use g_object_set_qdata() with data of %NULL instead.

<!-- ##### FUNCTION gtk_object_remove_no_notify ##### -->
<para>
Remove a specified datum from the object's data associations (the object_data),
without invoking the association's destroy handler.
</para>
<para>
Just like gtk_object_remove_data() except that any destroy handler
will be ignored.
Therefore this only affects data set using gtk_object_set_data_full().
</para>

@object: the object maintaining the association.
@key: name of the key for that association.
@Deprecated: Use g_object_steal_data() instead.

<!-- ##### FUNCTION gtk_object_remove_no_notify_by_id ##### -->
<para>
Just like gtk_object_remove_no_notify() except that it takes
a #GQuark instead of a string, so it is slightly faster.
</para>
<para>
Use gtk_object_data_try_key() and gtk_object_data_force_id()
to get an id from a string.
</para>

@object: object containing the associations.
@key_id: quark of the key.
@Deprecated: Use g_object_steal_qdata() instead.

<!-- ##### FUNCTION gtk_object_set ##### -->
<para>
Sets properties on an object. 
</para>
<para>
<informalexample>
<programlisting>
void set_box_properties (GtkBox* box)
{
  gtk_object_set (GTK_OBJECT (box), "homogeneous", TRUE,
                                    "spacing", 8,
				    NULL);
}
</programlisting>
</informalexample>
</para>

@object: a #GtkObject.
@first_property_name: name of the first property to set
@Varargs: the value of the first argument, followed optionally
by more name/value pairs, followed by %NULL.
@Deprecated: Use g_object_set() instead.

<!-- ##### FUNCTION gtk_object_set_data ##### -->
<para>
Each object carries around a table of associations from
strings to pointers.  This function lets you set an association.
</para>
<para>
If the object already had an association with that name,
the old association will be destroyed.
</para>

@object: object containing the associations.
@key: name of the key.
@data: data to associate with that key.
@Deprecated: Use g_object_set_data() instead.

<!-- ##### FUNCTION gtk_object_set_data_by_id ##### -->
<para>
Just like gtk_object_set_data() except that it takes
a #GQuark instead of a string, so it is slightly faster.
</para>
<para>
Use gtk_object_data_try_key() and gtk_object_data_force_id()
to get an id from a string.
</para>

@object: object containing the associations.
@data_id: quark of the key.
@data: data to associate with that key.
@Deprecated: Use g_object_set_qdata() instead.

<!-- ##### FUNCTION gtk_object_set_data_by_id_full ##### -->
<para>
Just like gtk_object_set_data_full() except that it takes
a #GQuark instead of a string, so it is slightly faster.
</para>
<para>
Use gtk_object_data_try_key() and gtk_object_data_force_id()
to get an id from a string.
</para>

@object: object containing the associations.
@data_id: quark of the key.
@data: data to associate with that key.
@destroy: function to call when the association is destroyed.
@Deprecated: Use g_object_set_qdata_full() instead.

<!-- ##### FUNCTION gtk_object_set_data_full ##### -->
<para>
Like gtk_object_set_data() except it adds notification
for when the association is destroyed, either by
gtk_object_remove_data() or when the object is destroyed.
</para>

@object: object containing the associations.
@key: name of the key.
@data: data to associate with that key.
@destroy: function to call when the association is destroyed.
@Deprecated: Use g_object_set_data_full() instead.

<!-- ##### FUNCTION gtk_object_set_user_data ##### -->
<para>
For convenience, every object offers a generic user data
pointer.  This function sets it.
</para>

@object: the object whose user data should be set.
@data: the new value for the user data.
@Deprecated: Use g_object_set_data() instead.

<!-- ##### FUNCTION gtk_object_setv ##### -->
<para>
Set an array of arguments.
</para>

@object: the object whose arguments should be set.
@n_args: the number of arguments to set.
@args: the desired values, as an array of #GtkArgs (which contain 
the names, types, and values of the arguments).

<!-- ##### FUNCTION gtk_object_sink ##### -->
<para>
Removes the floating reference from a #GtkObject, if it exists; 
otherwise does nothing. See the #GtkObject overview documentation at 
the top of the page.
</para>

@object: the object to sink.
@Deprecated: 2.10: Use g_object_ref_sink() instead

<!-- ##### FUNCTION gtk_object_unref ##### -->
<para>
Decreases the reference count of an object.  When its reference count drops 
to 0, the object is finalized (i.e. its memory is freed).  
</para>

@object: the object to dereference.
@Deprecated: Use g_object_unref() instead.

<!-- ##### FUNCTION gtk_object_weakref ##### -->
<para>
Adds a weak reference callback to an object. Weak references are used for notification when an object is
finalized. They are called "weak references" because they allow you to safely
hold a pointer to an object without calling g_object_ref() (g_object_ref() adds
a strong reference, that is, forces the object to stay alive).
</para>

@object: object to weakly reference.
@notify: callback to invoke before the object is freed.
@data: extra data to pass to #notify.
@Deprecated: Use g_object_weak_ref() instead.

<!-- ##### FUNCTION gtk_object_weakunref ##### -->
<para>
Removes a weak reference callback to an object.
</para>

@object: object stop weakly referencing.
@notify: callback to search for.
@data: data to search for.
@Deprecated: Use g_object_weak_unref() instead.

<!-- ##### FUNCTION gtk_packer_add ##### -->
<para>

</para>

@packer: 
@child: 
@side: 
@anchor: 
@options: 
@border_width: 
@pad_x: 
@pad_y: 
@i_pad_x: 
@i_pad_y: 

<!-- ##### FUNCTION gtk_packer_add_defaults ##### -->
<para>

</para>

@packer: 
@child: 
@side: 
@anchor: 
@options: 

<!-- ##### MACRO gtk_packer_configure ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_packer_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_packer_reorder_child ##### -->
<para>

</para>

@packer: 
@child: 
@position: 

<!-- ##### FUNCTION gtk_packer_set_child_packing ##### -->
<para>

</para>

@packer: 
@child: 
@side: 
@anchor: 
@options: 
@border_width: 
@pad_x: 
@pad_y: 
@i_pad_x: 
@i_pad_y: 

<!-- ##### FUNCTION gtk_packer_set_default_border_width ##### -->
<para>

</para>

@packer: 
@border: 

<!-- ##### FUNCTION gtk_packer_set_default_ipad ##### -->
<para>

</para>

@packer: 
@i_pad_x: 
@i_pad_y: 

<!-- ##### FUNCTION gtk_packer_set_default_pad ##### -->
<para>

</para>

@packer: 
@pad_x: 
@pad_y: 

<!-- ##### FUNCTION gtk_packer_set_spacing ##### -->
<para>

</para>

@packer: 
@spacing: 

<!-- ##### FUNCTION gtk_paint_string ##### -->
<para>

</para>

@style: 
@window: 
@state_type: 
@area: 
@widget: 
@detail: 
@x: 
@y: 
@string: 

<!-- ##### MACRO gtk_paned_handle_size ##### -->
<para>
Old name for gtk_paned_set_handle_size().
</para>


<!-- ##### FUNCTION gtk_paned_set_handle_size ##### -->
<para>
Set the the handle size to @size x @size pixels.
</para>

@paned: a paned widget
@size: the size in pixels

<!-- ##### FUNCTION gtk_pattern_match ##### -->
<para>

</para>

@pspec: 
@string_length: 
@string: 
@string_reversed: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_match_simple ##### -->
<para>

</para>

@pattern: 
@string: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_match_string ##### -->
<para>

</para>

@pspec: 
@string: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_spec_free_segs ##### -->
<para>

</para>

@pspec: 

<!-- ##### FUNCTION gtk_pattern_spec_init ##### -->
<para>

</para>

@pspec: 
@pattern: 

<!-- ##### FUNCTION gtk_preview_draw_row ##### -->
<para>
Sets the data for a portion of a row.
</para>

@preview: a #GtkPreview.
@data: the new data for the portion. It should contain
       @w bytes of data if the preview is of type
       GTK_TYPE_GRAYSCALE, and 3*@w bytes of data
       if the preview is of type GTK_TYPE_COLOR.
@x: the starting value on the row to set.
@y: the row to change.
@w: the number of pixels in the row to change.

<!-- ##### FUNCTION gtk_preview_get_cmap ##### -->
<para>
Returns the colormap used by preview widgets. This
function is deprecated, and you should use
gdk_rgb_get_cmap() instead.
</para>

@Returns: the colormap for previews.

<!-- ##### FUNCTION gtk_preview_get_info ##### -->
<para>
Return a #GtkPreviewInfo structure containing 
global information about preview widgets.
</para>

@Returns: a #GtkPreviewInfo structure. The return
 value belongs to GTK+ and must not be modified
 or freed.

<!-- ##### FUNCTION gtk_preview_get_visual ##### -->
<para>
Returns the visual used by preview widgets. This
function is deprecated, and you should use
gdk_rgb_get_visual() instead.
</para>

@Returns: the visual for previews.

<!-- ##### FUNCTION gtk_preview_new ##### -->
<para>
Create a new preview widget.
</para>

@type: the type data contained by the widget. 
(Grayscale or RGB)
@Returns: a new #GtkPreview

<!-- ##### FUNCTION gtk_preview_put ##### -->
<para>
Takes a portion of the contents of a preview widget
and draws it onto the given drawable, @window.
</para>

@preview: a #GtkPreview.
@window: a window or pixmap.
@gc: The graphics context for the operation. Only the
     clip mask for this GC matters.
@srcx: the x coordinate of the upper left corner in the source image.
@srcy: the y coordinate of the upper left corner in the source image.
@destx: the x coordinate of the upper left corner in the destination image.
@desty: the y coordinate of the upper left corner in the destination image.
@width: the width of the rectangular portion to draw.
@height: the height of the rectangular portion to draw.

<!-- ##### FUNCTION gtk_preview_reset ##### -->
<para>
This function is deprecated and does nothing. It was
once used for changing the colormap and visual on the fly.
</para>


<!-- ##### FUNCTION gtk_preview_set_color_cube ##### -->
<para>
This function is deprecated and does nothing. GdkRGB
automatically picks an optimium color cube for the
display.
</para>

@nred_shades: ignored
@ngreen_shades: ignored
@nblue_shades: ignored
@ngray_shades: ignored

<!-- ##### FUNCTION gtk_preview_set_dither ##### -->
<para>
Set the dithering mode for the display. 
</para>

@preview: a #GtkPreview.
@dither: the dithering mode.

<!-- ##### FUNCTION gtk_preview_set_expand ##### -->
<para>
Determines the way that the the preview widget behaves
when the size it is allocated is larger than the requested
size. If @expand is %FALSE, then the preview's window
and buffer will be no larger than the size set with 
gtk_preview_size(), and the data set will be centered
in the allocation if it is larger. If @expand is %TRUE
then the window and buffer will expand with the allocation;
the application is responsible for catching
the "size_allocate" signal and providing the data 
appropriate for this size.
</para>

@preview: a #GtkPreview.
@expand: whether the preview's window should expand or not.

<!-- ##### FUNCTION gtk_preview_set_gamma ##### -->
<para>
Set the gamma-correction value for all preview widgets.
(This function will eventually be replaced with a
function that sets a per-preview-widget gamma value).
The resulting intensity is given by:
<literal>destination_value * pow (source_value/255, 1/gamma)</literal>.
The gamma value is applied when the data is
set with gtk_preview_draw_row() so changing this
value will not affect existing data in preview
widgets.
</para>

@gamma_: the new gamma value.

<!-- ##### FUNCTION gtk_preview_set_install_cmap ##### -->
<para>
This function is deprecated
and does nothing. GdkRGB will automatically pick
a private colormap if it cannot allocate sufficient
colors.
</para>

@install_cmap: ignored.

<!-- ##### FUNCTION gtk_preview_set_reserved ##### -->
<para>
This function is deprecated and does nothing.
</para>

@nreserved: ignored.

<!-- ##### FUNCTION gtk_preview_size ##### -->
<para>
Set the size that the preview widget will request
in response to a "size_request" signal. The 
drawing area may actually be allocated a size
larger than this depending on how it is packed
within the enclosing containers. The effect
of this is determined by whether the preview
is set to expand or not (see gtk_preview_expand())
</para>

@preview: a #GtkPreview.
@width: the new width.
@height: the new height.

<!-- ##### FUNCTION gtk_preview_uninit ##### -->
<para>
This function is deprecated and does nothing.
</para>


<!-- ##### FUNCTION gtk_print_context_create_context ##### -->
<para>

</para>

@context: 
@Returns: 

<!-- ##### FUNCTION gtk_print_context_create_layout ##### -->
<para>

</para>

@context: 
@Returns: 

<!-- ##### FUNCTION gtk_print_context_get_cairo ##### -->
<para>

</para>

@context: 
@Returns: 

<!-- ##### FUNCTION gtk_print_context_get_fontmap ##### -->
<para>

</para>

@context: 
@Returns: 

<!-- ##### FUNCTION gtk_print_operation_set_nr_of_pages ##### -->
<para>

</para>

@op: 
@n_pages: 

<!-- ##### FUNCTION gtk_print_settings_get_num_copies ##### -->
<para>

</para>

@settings: 
@Returns: 

<!-- ##### FUNCTION gtk_print_settings_get_print_to_file ##### -->
<para>

</para>

@settings: 
@Returns: 

<!-- ##### FUNCTION gtk_print_settings_set_num_copies ##### -->
<para>

</para>

@settings: 
@num_copies: 

<!-- ##### FUNCTION gtk_print_settings_set_print_to_file ##### -->
<para>

</para>

@settings: 
@print_to_file: 

<!-- ##### FUNCTION gtk_progress_bar_new_with_adjustment ##### -->


@adjustment: 
@Returns: 

<!-- ##### FUNCTION gtk_progress_bar_set_activity_blocks ##### -->
<para>
Sets the number of blocks used when the progress bar is in activity
mode.  Larger numbers make the visible block smaller.
</para>

@pbar: a #GtkProgressBar.
@blocks: number of blocks which can fit within the progress bar area.

<!-- ##### FUNCTION gtk_progress_bar_set_activity_step ##### -->
<para>
Sets the step value used when the progress bar is in activity
mode.  The step is the amount by which the progress is incremented
each iteration.
</para>

@pbar: a #GtkProgressBar.
@step: the amount which the progress is incremented in activity
mode.

<!-- ##### FUNCTION gtk_progress_bar_set_bar_style ##### -->
<para>
Sets the style of the #GtkProgressBar.  The default style is
%GTK_PROGRESS_CONTINUOUS.
</para>

@pbar: a #GtkProgressBar.
@style: a #GtkProgressBarStyle value indicating the desired style.

<!-- ##### FUNCTION gtk_progress_bar_set_discrete_blocks ##### -->
<para>
Sets the number of blocks that the progress bar is divided into
when the style is %GTK_PROGRESS_DISCRETE.
</para>

@pbar: a #GtkProgressBar.
@blocks: number of individual blocks making up the bar.

<!-- ##### FUNCTION gtk_progress_bar_update ##### -->
<para>
This function is deprecated.  Please use gtk_progress_set_value() or
gtk_progress_set_percentage() instead.
</para>

@pbar: a #GtkProgressBar.
@percentage: the new percent complete value.

<!-- ##### MACRO gtk_radio_menu_item_group ##### -->
<para>
Deprecated compatibility macro. Use gtk_radio_menu_item_get_group() instead.
</para>


<!-- ##### FUNCTION gtk_rc_add_class_style ##### -->
<para>
Adds a #GtkRcStyle that will be looked up by a matching against
the class hierarchy of the widget. This is equivalent to a:
<literal>class PATTERN style STYLE</literal>
statement in a RC file.
</para>

@rc_style: the #GtkRcStyle to use for widgets deriving from @pattern
@pattern: the pattern
@Deprecated: Use gtk_rc_parse_string() with a suitable string instead.

<!-- ##### FUNCTION gtk_rc_add_widget_class_style ##### -->
<para>
Adds a #GtkRcStyle that will be looked up by a match against
the widget's class pathname. This is equivalent to a:
<literal>widget_class PATTERN style STYLE</literal>
statement in a RC file.
</para>

@rc_style: the #GtkRcStyle to use for widgets matching @pattern
@pattern: the pattern
@Deprecated: Use gtk_rc_parse_string() with a suitable string instead.

<!-- ##### FUNCTION gtk_rc_add_widget_name_style ##### -->
<para>
Adds a #GtkRcStyle that will be looked up by a match against
the widget's pathname. This is equivalent to a:
 <literal>widget PATTERN style STYLE</literal>
statement in a RC file.
</para>

@rc_style: the #GtkRcStyle to use for widgets matching @pattern
@pattern: the pattern
@Deprecated: Use gtk_rc_parse_string() with a suitable string instead.

<!-- ##### FUNCTION gtk_rc_init ##### -->
<para>
Internal function.
</para>


<!-- ##### FUNCTION gtk_rc_load_image ##### -->
<para>
Internal function. Loads an image using the current
image loader.
</para>

@colormap: the colormap to use for the image
@transparent_color: the transparent color for the image
@filename: the filename of the image file
@Returns: a #GtkPixmap representing @filename

<!-- ##### FUNCTION gtk_rc_set_image_loader ##### -->
<para>
Sets the function that GTK+ will use to load images 
</para>

@loader: the #GtkImageLoader to use

<!-- ##### FUNCTION gtk_rc_style_ref ##### -->
<para>
Increments the reference count of a #GtkRcStyle.
</para>

@rc_style: a #GtkRcStyle
@Deprecated: Use g_object_ref() instead

<!-- ##### FUNCTION gtk_rc_style_unref ##### -->
<para>
Decrements the reference count of a #GtkRcStyle and
frees if the result is 0.
</para>

@rc_style: a #GtkRcStyle
@Deprecated: Use g_object_unref() instead

<!-- ##### FUNCTION gtk_recent_chooser_get_show_numbers ##### -->
<para>

</para>

@chooser: 
@Returns: 

<!-- ##### FUNCTION gtk_recent_chooser_set_show_numbers ##### -->
<para>

</para>

@chooser: 
@show_numbers: 

<!-- ##### FUNCTION gtk_recent_manager_get_for_screen ##### -->
<para>

</para>

@screen: 
@Returns: 

<!-- ##### FUNCTION gtk_recent_manager_set_screen ##### -->
<para>

</para>

@manager: 
@screen: 

<!-- ##### FUNCTION gtk_ruler_draw_pos ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### FUNCTION gtk_ruler_draw_ticks ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### FUNCTION gtk_scale_button_get_orientation ##### -->
<para>

</para>

@button: 
@Returns: 

<!-- ##### FUNCTION gtk_scale_button_set_orientation ##### -->
<para>

</para>

@button: 
@orientation: 

<!-- ##### FUNCTION gtk_selection_clear ##### -->
<para>
</para>

@widget: 
@event: 
@Returns: 

<!-- ##### FUNCTION gtk_selection_incr_event ##### -->
<para>
Internal function.
</para>

@window: 
@event: 
@Returns: 

<!-- ##### FUNCTION gtk_selection_notify ##### -->
<para>
Internal function.
</para>

@widget: 
@event: 
@Returns: 

<!-- ##### FUNCTION gtk_selection_property_notify ##### -->
<para>
Internal function.
</para>

@widget: 
@event: 
@Returns: 

<!-- ##### FUNCTION gtk_selection_request ##### -->
<para>
Internal function.
</para>

@widget: 
@event: 
@Returns: 

<!-- ##### FUNCTION gtk_settings_get_global ##### -->
<para>

</para>

@Returns: 

<!-- ##### MACRO gtk_spin_button_get_value_as_float ##### -->
<para>
Gets the value in the @spin_button. 
</para>

@Returns: the value of @spin_button
@Deprecated: Use gtk_spin_button_get_value() instead.
@spin_button: a #GtkSpinButton

<!-- ##### FUNCTION gtk_spin_button_set_shadow_type ##### -->
<para>
Creates a border around the arrows of a #GtkSpinButton. The type of border is determined by @shadow_type.
</para>

@spin_button: a #GtkSpinButton
@shadow_type: the new border type.

<!-- ##### FUNCTION gtk_status_icon_set_tooltip ##### -->
<para>

</para>

@status_icon: 
@tooltip_text: 

<!-- ##### FUNCTION gtk_stock_list_items ##### -->
<para>

</para>

@Returns: 

<!-- ##### MACRO gtk_style_apply_default_pixmap ##### -->
<para>
Does the same as gtk_style_apply_default_background().
</para>

@s: 
@gw: 
@st: 
@a: 
@x: 
@y: 
@w: 
@h: 
@Deprecated: Use gtk_style_apply_default_background() instead.

<!-- ##### FUNCTION gtk_style_get_font ##### -->
<para>

</para>

@style: 
@Returns: 

<!-- ##### FUNCTION gtk_style_get_font_for_display ##### -->
<para>

</para>

@display: 
@style: 
@Returns: 

<!-- ##### FUNCTION gtk_style_get_property ##### -->
<para>

</para>

@style: 
@widget_type: 
@property_name: 
@value: 

<!-- ##### FUNCTION gtk_style_lookup_icon_set ##### -->
<para>

</para>

@style: 
@stock_id: 
@Returns: 

<!-- ##### FUNCTION gtk_style_ref ##### -->
<para>

</para>

@style: 
@Returns: 

<!-- ##### FUNCTION gtk_style_set_font ##### -->
<para>

</para>

@style: 
@font: 

<!-- ##### FUNCTION gtk_style_unref ##### -->
<para>

</para>

@style: 

<!-- ##### FUNCTION gtk_text_buffer_paste_primary ##### -->
<para>

</para>

@buffer: 
@override_location: 
@default_editable: 

<!-- ##### FUNCTION gtk_text_iter_reorder ##### -->
<para>

</para>

@first: 
@second: 

<!-- ##### FUNCTION gtk_text_iter_spew ##### -->
<para>

</para>

@iter: 
@desc: 

<!-- ##### FUNCTION gtk_text_view_set_text_window_size ##### -->
<para>

</para>

@text_view: 
@width: 
@height: 

<!-- ##### FUNCTION gtk_tips_query_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_tips_query_new ##### -->
<para>
Creates a new #GtkTipsQuery.
</para>

@Returns: a new #GtkTipsQuery.

<!-- ##### FUNCTION gtk_tips_query_set_caller ##### -->
<para>
Sets the widget which initiates the query, usually a button.
If the @caller is selected while the query is running, the query is
automatically stopped.
</para>

@tips_query: a #GtkTipsQuery.
@caller: the widget which initiates the query.

<!-- ##### FUNCTION gtk_tips_query_set_labels ##### -->
<para>
Sets the text to display when the query is not in effect,
and the text to display when the query is in effect but the widget beneath
the pointer has no tooltip.
</para>

@tips_query: a #GtkTipsQuery.
@label_inactive: the text to display when the query is not running.
@label_no_tip: the text to display when the query is running but the widget
beneath the pointer has no tooltip.

<!-- ##### FUNCTION gtk_tips_query_start_query ##### -->
<para>
Starts a query.
The #GtkTipsQuery widget will take control of the mouse and as the mouse
moves it will display the tooltip of the widget beneath the mouse.
</para>

@tips_query: a #GtkTipsQuery.

<!-- ##### FUNCTION gtk_tips_query_stop_query ##### -->
<para>
Stops a query.
</para>

@tips_query: a #GtkTipsQuery.

<!-- ##### FUNCTION gtk_tool_item_get_pack_end ##### -->
<para>

</para>

@tool_item: 
@Returns: 

<!-- ##### FUNCTION gtk_tool_item_set_pack_end ##### -->
<para>

</para>

@tool_item: 
@pack_end: 

<!-- ##### FUNCTION gtk_toolbar_append_element ##### -->
<para>

</para>
<para>

</para>

@toolbar: 
@type: 
@widget: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_append_item ##### -->
<para>

</para>

@toolbar: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_append_space ##### -->
<para>

</para>

@toolbar: 

<!-- ##### FUNCTION gtk_toolbar_append_widget ##### -->
<para>

</para>

@toolbar: 
@widget: 
@tooltip_text: 
@tooltip_private_text: 

<!-- ##### FUNCTION gtk_toolbar_get_orientation ##### -->
<para>

</para>

@toolbar: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_get_tooltips ##### -->
<para>

</para>

@toolbar: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_insert_element ##### -->
<para>

</para>

@toolbar: 
@type: 
@widget: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@position: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_insert_item ##### -->
<para>

</para>

@toolbar: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@position: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_insert_space ##### -->
<para>

</para>

@toolbar: 
@position: 

<!-- ##### FUNCTION gtk_toolbar_insert_stock ##### -->
<para>

</para>

@toolbar: 
@stock_id: 
@tooltip_text: 
@tooltip_private_text: 
@callback: 
@user_data: 
@position: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_insert_widget ##### -->
<para>

</para>

@toolbar: 
@widget: 
@tooltip_text: 
@tooltip_private_text: 
@position: 

<!-- ##### FUNCTION gtk_toolbar_prepend_element ##### -->
<para>

</para>

@toolbar: 
@type: 
@widget: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_prepend_item ##### -->
<para>

</para>

@toolbar: 
@text: 
@tooltip_text: 
@tooltip_private_text: 
@icon: 
@callback: 
@user_data: 
@Returns: 

<!-- ##### FUNCTION gtk_toolbar_prepend_space ##### -->
<para>

</para>

@toolbar: 

<!-- ##### FUNCTION gtk_toolbar_prepend_widget ##### -->
<para>

</para>

@toolbar: 
@widget: 
@tooltip_text: 
@tooltip_private_text: 

<!-- ##### FUNCTION gtk_toolbar_remove_space ##### -->
<para>

</para>

@toolbar: 
@position: 

<!-- ##### FUNCTION gtk_toolbar_set_orientation ##### -->
<para>

</para>

@toolbar: 
@orientation: 

<!-- ##### FUNCTION gtk_toolbar_set_tooltips ##### -->
<para>

</para>

@toolbar: 
@enable: 

<!-- ##### FUNCTION gtk_trace_referencing ##### -->
<para>
Private: print debugging information while doing a gtk_object_ref() or 
a gtk_object_unref().
</para>

@object: object to reference or unreference.
@func: name of caller's function to print (used within macros).
@dummy: unused.
@line: line number (used within macros).
@do_ref: whether to reference or unreference.

<!-- ##### MACRO gtk_tree_model_get_iter_root ##### -->
<para>
A alternate name for gtk_tree_model_get_iter_first() provided for
compatibility reasons; this macro will be deprecated in future
versions of GTK+.
</para>

@tree_model:  A #GtkTreeModel.
@iter: uninitialized #GtkTreeIter.
@Returns:  %TRUE, if @iter was set.

<!-- ##### FUNCTION gtk_tree_model_ref_iter ##### -->
<para>

</para>

@tree_model: 
@iter: 

<!-- ##### FUNCTION gtk_tree_model_sort_convert_iter ##### -->
<para>

</para>

@tree_model_sort: 
@sort_iter: 
@child_iter: 

<!-- ##### FUNCTION gtk_tree_model_sort_convert_path ##### -->
<para>

</para>

@tree_model_sort: 
@child_path: 
@Returns: 
@path: 

<!-- ##### FUNCTION gtk_tree_model_sort_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_tree_model_sort_set_compare ##### -->
<para>

</para>

@tree_model_sort: 
@func: 

<!-- ##### FUNCTION gtk_tree_model_sort_set_model ##### -->
<para>

</para>

@tree_model_sort: 
@child_model: 
@model: 

<!-- ##### FUNCTION gtk_tree_model_sort_set_sort_column ##### -->
<para>

</para>

@tree_model_sort: 
@sort_col: 

<!-- ##### FUNCTION gtk_tree_model_unref_iter ##### -->
<para>

</para>

@tree_model: 
@iter: 

<!-- ##### MACRO gtk_tree_path_new_root ##### -->
<para>
An alternate name for gtk_tree_path_new_first() provided for
compatibility reasons.
</para>

@Returns: A new #GtkTreePath.
@Deprecated: Use gtk_tree_path_new_first() instead.

<!-- ##### FUNCTION gtk_tree_store_move ##### -->
<para>

</para>

@tree_store: 
@iter: 
@position: 

<!-- ##### FUNCTION gtk_tree_store_new_with_types ##### -->
<para>

</para>

@n_columns: 
@Varargs: 
@Returns: 

<!-- ##### FUNCTION gtk_tree_store_set_cell ##### -->
<para>

</para>

@tree_store: 
@iter: 
@column: 
@value: 

<!-- ##### FUNCTION gtk_tree_store_set_column_type ##### -->
<para>

</para>

@tree_store: 
@column: 
@type: 
@store: 

<!-- ##### FUNCTION gtk_tree_store_set_n_columns ##### -->
<para>

</para>

@tree_store: 
@n_columns: 

<!-- ##### FUNCTION gtk_tree_view_column_cell_event ##### -->
<para>

</para>

@tree_column: 
@event: 
@path_string: 
@background_area: 
@cell_area: 
@flags: 
@Returns: 

<!-- ##### FUNCTION gtk_tree_view_column_set_cell_data ##### -->
<para>

</para>

@tree_column: 
@tree_model: 
@iter: 

<!-- ##### FUNCTION gtk_tree_view_column_set_cell_renderer ##### -->
<para>

</para>

@tree_column: 
@cell: 

<!-- ##### FUNCTION gtk_tree_view_column_set_width ##### -->
<para>

</para>

@tree_column: 
@width: 
@size: 

<!-- ##### FUNCTION gtk_tree_view_set_rows_drag_dest ##### -->
<para>

</para>

@tree_view: 
@targets: 
@n_targets: 
@actions: 
@location_droppable_func: 
@user_data: 

<!-- ##### FUNCTION gtk_tree_view_set_rows_drag_source ##### -->
<para>

</para>

@tree_view: 
@start_button_mask: 
@targets: 
@n_targets: 
@actions: 
@row_draggable_func: 
@user_data: 

<!-- ##### FUNCTION gtk_tree_view_tree_to_widget_coords ##### -->
<para>

</para>

@tree_view: 
@tx: 
@ty: 
@wx: 
@wy: 

<!-- ##### FUNCTION gtk_tree_view_widget_to_tree_coords ##### -->
<para>

</para>

@tree_view: 
@wx: 
@wy: 
@tx: 
@ty: 

<!-- ##### FUNCTION gtk_type_check_class_cast ##### -->
<para>
Given a GtkTypeClass pointer @klass, and a GtkType @cast_type, make
sure that it's okay to cast something of that @klass into a @cast_type.
</para>

@klass: GtkTypeClass*
@cast_type: GtkType
@Returns: Always return @klass.

<!-- ##### FUNCTION gtk_type_check_object_cast ##### -->
<para>
Given a pointer to a GtkTypeObject @type_object, and a GtkType @cast_type,
make sure that it's okay to cast @type_object into a @cast_type.
</para>

@type_object: GtkTypeObject*
@cast_type: GtkType
@Returns: the same GtkTypeObject* as @type_object

<!-- ##### FUNCTION gtk_type_children_types ##### -->
<para>
Return the pointer to the type's children's types.
</para>

@type: GtkType
@Returns: pointer to a GList

<!-- ##### FUNCTION gtk_type_class ##### -->
<para>
Returns a pointer pointing to the class of @type or %NULL if there was
any trouble identifying @type.  Initializes the class if necessary.
</para>

@type: a #GtkType.
@Returns: pointer to the class.

<!-- ##### FUNCTION gtk_type_describe_heritage ##### -->
<para>
Print the types @type inherits from.
</para>

@type: GtkType

<!-- ##### FUNCTION gtk_type_describe_tree ##### -->
<para>
Given a @type, describe all of its children, and their children.  Only
show the size if @show_size is true.
</para>

@type: GtkType
@show_size: gboolean

<!-- ##### FUNCTION gtk_type_enum_find_value ##### -->
<para>
Returns a pointer to one of @enum_type's #GtkEnumValues's whose name (or nickname) matches @value_name.
</para>

@enum_type: a #GtkType.
@value_name: the name to look for.
@Returns: #GtkEnumValue*

<!-- ##### FUNCTION gtk_type_enum_get_values ##### -->
<para>
If @enum_type has values, then return a pointer to all of them.
</para>

@enum_type: a #GtkType.
@Returns: #GtkEnumValue*

<!-- ##### FUNCTION gtk_type_flags_find_value ##### -->
<para>
Returns a pointer to one of @flag_type's #GtkFlagValue's whose name (or nickname) matches @value_name.
</para>

@flags_type: a #GtkType.
@value_name: the name to look for.
@Returns: #GtkFlagValue*
@flag_type: GtkType

<!-- ##### FUNCTION gtk_type_flags_get_values ##### -->
<para>
If @flags_type has values, then return a pointer to all of them.
</para>

@flags_type: a #GtkType.
@Returns: #GtkFlagValue*

<!-- ##### FUNCTION gtk_type_free ##### -->
<para>
Given the type of an object and a pointer to it, the object is freed.
</para>

@type: GtkType
@mem: gpointer to the object

<!-- ##### MACRO gtk_type_from_name ##### -->
<para>
Gets the internal representation of a type, given its name.
</para>

@name: the name of a GTK+ type
@Returns: a #GtkType.

<!-- ##### FUNCTION gtk_type_get_varargs_type ##### -->
<para>
Get the varargs type associated with @foreign_type
</para>

@foreign_type: GtkType
@Returns: GtkType

<!-- ##### FUNCTION gtk_type_init ##### -->
<para>
Initializes the data structures associated with GTK+ types.
</para>

@debug_flags: debug flags

<!-- ##### MACRO gtk_type_is_a ##### -->
<para>
Looks in the type hierarchy to see if @type has @is_a_type among its
ancestors.  Do so with a simple lookup, not a loop.
</para>

@type: a #GtkType.
@is_a_type: another #GtkType.
@Returns: %TRUE if @type is a @is_a_type.

<!-- ##### MACRO gtk_type_name ##### -->
<para>
Returns a pointer to the name of a type, or %NULL if it has none.
</para>

@type: a #GtkType.
@Returns: a pointer to the name of a type, or %NULL if it has none.

<!-- ##### FUNCTION gtk_type_new ##### -->
<para>
Creates a new object of a given type, and return a pointer to it.
Returns %NULL if you give it an invalid type.  It allocates the object
out of the type's memory chunk if there is a memory chunk.  The object
has all the proper initializers called.
</para>

@type: a #GtkType.
@Returns: pointer to a #GtkTypeObject.

<!-- ##### MACRO gtk_type_parent ##### -->
<para>
Returns the parent type of a #GtkType.
</para>

@type: a #GtkType.
@Returns: the #GtkType of the parent.

<!-- ##### FUNCTION gtk_type_parent_class ##### -->
<para>
Return the class of the parent.  Initialize the class if necessary.
Return NULL if anything goes wrong.
</para>

@type: GtkType
@Returns: gpointer to the klass.

<!-- ##### FUNCTION gtk_type_query ##### -->
<para>
Given a type, return various interesting parameters of the type.
</para>

@type: GtkType
@Returns: GtkTypeQuery*

<!-- ##### FUNCTION gtk_type_register_enum ##### -->
<para>
Register a new set of enum @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkEnumValue*
@Returns: 

<!-- ##### FUNCTION gtk_type_register_flags ##### -->
<para>
Register a new set of flags @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkFlagValue*
@Returns: 

<!-- ##### FUNCTION gtk_type_set_chunk_alloc ##### -->
<para>
Set the mem_chunk size so it will hold @n_chunks of the objects of that @type.
</para>

@type: There must be an unlocked TypeNode associated with this type otherwise nothing happens.
@n_chunks: 

<!-- ##### FUNCTION gtk_type_set_varargs_type ##### -->
<para>
Set the varargs type for a fundamental type @foreign_type.
</para>

@foreign_type: Must be a GtkType with a sequence number of zero.  Must not be a
fundamental type.
@varargs_type: Must be a GtkType which is either structured or flag, or NONE.

<!-- ##### FUNCTION gtk_type_unique ##### -->
<para>
Creates a new, unique type.
</para>

@parent_type: if zero, a fundamental type is created
@gtkinfo: must not be %NULL, and @type_info->type_name must also not be %NULL
@Returns: the new #GtkType

<!-- ##### FUNCTION gtk_widget_accelerator_signal ##### -->
<para>

</para>

@widget: 
@accel_group: 
@accel_key: 
@accel_mods: 
@Returns: 

<!-- ##### FUNCTION gtk_widget_accelerators_locked ##### -->
<para>

</para>

@widget: 
@Returns: 

<!-- ##### FUNCTION gtk_widget_activate_mnemonic ##### -->
<para>

</para>

@widget: 
@group_cycling: 
@Returns: 

<!-- ##### FUNCTION gtk_widget_get_usize ##### -->
<para>

</para>

@widget: 
@width: 
@height: 

<!-- ##### FUNCTION gtk_widget_lock_accelerators ##### -->
<para>

</para>

@widget: 

<!-- ##### FUNCTION gtk_widget_pop_style ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_widget_popup ##### -->
<para>

</para>

@widget: 
@x: 
@y: 

<!-- ##### FUNCTION gtk_widget_push_style ##### -->
<para>

</para>

@style: 

<!-- ##### FUNCTION gtk_widget_remove_accelerators ##### -->
<para>

</para>

@widget: 
@accel_signal: 
@visible_only: 

<!-- ##### FUNCTION gtk_widget_set_default_style ##### -->
<para>

</para>

@style: 

<!-- ##### FUNCTION gtk_widget_unlock_accelerators ##### -->
<para>

</para>

@widget: 

<!-- ##### FUNCTION gtk_window_activate_mnemonic ##### -->
<para>

</para>

@window: 
@keyval: 
@modifier: 
@Returns: 

<!-- ##### FUNCTION gtk_window_get_default ##### -->
<para>

</para>

@window: 
@Returns: 

<!-- ##### FUNCTION gtk_window_get_default_accel_group ##### -->
<para>

</para>

@window: 
@Returns: 

<!-- ##### FUNCTION gtk_window_get_resizeable ##### -->
<para>

</para>

@window: 
@Returns: 

<!-- ##### FUNCTION gtk_window_set_decorations_hint ##### -->
<para>

</para>

@window: 
@decorations: 

<!-- ##### FUNCTION gtk_window_set_functions_hint ##### -->
<para>

</para>

@window: 
@functions: 

<!-- ##### FUNCTION gtk_window_set_resizeable ##### -->
<para>

</para>

@window: 
@setting: 
@resizeable: 

